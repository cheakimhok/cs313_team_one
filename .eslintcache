[{"/Users/cheakimhokmao/Documents/cs313_team_one/src/index.js":"1","/Users/cheakimhokmao/Documents/cs313_team_one/src/App.js":"2","/Users/cheakimhokmao/Documents/cs313_team_one/src/reportWebVitals.js":"3","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/Main.js":"4","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/SignIn.js":"5","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/SignUp.js":"6","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/ConfirmEmail.js":"7","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/ConfirmPassword.js":"8","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/UnitConverter.js":"9","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/ScientificCalculator.js":"10","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/Header.js":"11","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/randomizer/App.js":"12","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/randomizer/InformationRandomizer.js":"13","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/services/UrlService.js":"14","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/basicCal/component/App.js":"15","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/SideMenu.js":"16","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/randomizer/Body.js":"17","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/randomizer/Nav.js":"18","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/basicCal/component/ButtonPanel.js":"19","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/basicCal/component/Display.js":"20","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/basicCal/logic/calculate.js":"21","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/basicCal/component/Button.js":"22","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/basicCal/logic/operate.js":"23","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/basicCal/logic/isNumber.js":"24"},{"size":603,"mtime":1614703352042,"results":"25","hashOfConfig":"26"},{"size":290,"mtime":1614703352036,"results":"27","hashOfConfig":"26"},{"size":362,"mtime":1614703352042,"results":"28","hashOfConfig":"26"},{"size":2819,"mtime":1614706519084,"results":"29","hashOfConfig":"26"},{"size":6642,"mtime":1614703352038,"results":"30","hashOfConfig":"26"},{"size":7622,"mtime":1614703352038,"results":"31","hashOfConfig":"26"},{"size":4216,"mtime":1614703352036,"results":"32","hashOfConfig":"26"},{"size":5670,"mtime":1614703352037,"results":"33","hashOfConfig":"26"},{"size":28328,"mtime":1614706277585,"results":"34","hashOfConfig":"26"},{"size":45203,"mtime":1614958033082,"results":"35","hashOfConfig":"26"},{"size":2604,"mtime":1614703352037,"results":"36","hashOfConfig":"26"},{"size":4651,"mtime":1614703352040,"results":"37","hashOfConfig":"26"},{"size":5341,"mtime":1614703352041,"results":"38","hashOfConfig":"26"},{"size":1388,"mtime":1614703352041,"results":"39","hashOfConfig":"26"},{"size":1973,"mtime":1614703352039,"results":"40","hashOfConfig":"26"},{"size":591,"mtime":1614703352038,"results":"41","hashOfConfig":"26"},{"size":3987,"mtime":1614703352041,"results":"42","hashOfConfig":"26"},{"size":1481,"mtime":1614703352041,"results":"43","hashOfConfig":"26"},{"size":2021,"mtime":1614703352039,"results":"44","hashOfConfig":"26"},{"size":369,"mtime":1614703352040,"results":"45","hashOfConfig":"26"},{"size":3418,"mtime":1614703352040,"results":"46","hashOfConfig":"26"},{"size":711,"mtime":1614703352039,"results":"47","hashOfConfig":"26"},{"size":809,"mtime":1614703352040,"results":"48","hashOfConfig":"26"},{"size":74,"mtime":1614703352040,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1h03hve",{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/cheakimhokmao/Documents/cs313_team_one/src/index.js",[],"/Users/cheakimhokmao/Documents/cs313_team_one/src/App.js",[],"/Users/cheakimhokmao/Documents/cs313_team_one/src/reportWebVitals.js",[],"/Users/cheakimhokmao/Documents/cs313_team_one/src/components/Main.js",[],"/Users/cheakimhokmao/Documents/cs313_team_one/src/components/SignIn.js",["99","100"],"/Users/cheakimhokmao/Documents/cs313_team_one/src/components/SignUp.js",["101","102"],"/Users/cheakimhokmao/Documents/cs313_team_one/src/components/ConfirmEmail.js",["103","104","105"],"/Users/cheakimhokmao/Documents/cs313_team_one/src/components/ConfirmPassword.js",["106","107","108"],"/Users/cheakimhokmao/Documents/cs313_team_one/src/components/UnitConverter.js",[],"/Users/cheakimhokmao/Documents/cs313_team_one/src/components/ScientificCalculator.js",["109"],"import React, { Component } from 'react';\nimport './ScientificCalculator.css';\nimport PointTarget from 'react-point';\n\nclass AutoScalingText extends Component {\n    state = {\n        scale: 1,\n    };\n\n    componentDidUpdate() {\n        const { scale } = this.state;\n        const node = this.node;\n        const parentNode = node.parentNode;\n        const availableWidth = parentNode.offsetWidth;\n        const actualWidth = node.offsetWidth;\n        const actualScale = availableWidth / actualWidth;\n\n        if (scale === actualScale) return;\n\n        if (actualScale < 1) {\n            this.setState({ scale: actualScale });\n        } else if (scale < 1) {\n            this.setState({ scale: 1 });\n        }\n    }\n\n    render() {\n        const { scale } = this.state;\n\n        return (\n            <div\n                className='auto-scaling-text'\n                style={{ transform: `scale(${scale},${scale})` }}\n                ref={(node) => (this.node = node)}\n            >\n                {this.props.children}\n            </div>\n        );\n    }\n}\n\nclass CalculatorDisplay extends Component {\n    render() {\n        const { value, ...props } = this.props;\n        const language = navigator.language || 'en-US';\n        const escapedKeys = [' e ', 'E', '*', '(', ')', 'r', 'o'];\n        let isNumeric = true;\n\n        escapedKeys.forEach((key) => {\n            if (value.includes(key)) isNumeric = false;\n        });\n\n        const parsedValue = isNumeric ? parseFloat(value) : value;\n\n        let formattedValue = parsedValue.toLocaleString(language, {\n            useGrouping: true,\n            maximumFractionDigits: 10,\n        });\n\n        const match = value.match(/\\.\\d*?(0*)$/);\n\n        if (match) formattedValue += /[1-9]/.test(match[0]) ? match[1] : match[0];\n\n        return (\n            <div {...props}>\n                <AutoScalingText>{formattedValue}</AutoScalingText>\n            </div>\n        );\n    }\n}\n\nclass CalculatorKey extends Component {\n    render() {\n        const { onPress, className, ...props } = this.props;\n\n        return (\n            <PointTarget onPoint={onPress}>\n                <button className={`calculator-key ${className}`} {...props} />\n            </PointTarget>\n        );\n    }\n}\n\nconst CalculatorOperations = {\n    '/': (prevValue, nextValue) => (nextValue === 0 ? 'error' : prevValue / nextValue),\n    '*': (prevValue, nextValue) => prevValue * nextValue,\n    '+': (prevValue, nextValue) => prevValue + nextValue,\n    '-': (prevValue, nextValue) => prevValue - nextValue,\n    '=': (prevValue, nextValue) => nextValue,\n    nthRoot: (prevValue, nextValue) => Math.pow(nextValue, 1 / prevValue),\n    xPowY: (prevValue, nextValue) => Math.pow(prevValue, nextValue),\n    yPowX: (prevValue, nextValue) => Math.pow(nextValue, prevValue),\n    logY: (prevValue, nextValue) => Math.log(nextValue) / Math.log(prevValue),\n};\n\nclass ScientificCalculator extends Component {\n    state = {\n        value: null,\n        displayValue: '0',\n        operator: null,\n        waitingForOperand: false,\n        isDot: false,\n        done: false,\n        shift: false,\n        degree: false,\n        ee: false,\n        isMemoryActive: false,\n        isBracketsActive: false,\n        isLeftBracket: false,\n        isRightBracket: false,\n        isDigit: false,\n        isOperator: false,\n        countBracket: 0,\n        checkLeftBracket: false,\n        memory: {\n            memory_plus: 0,\n            memory_minus: 0,\n            memory_recall: null,\n        },\n    };\n\n    degreeClick = () => {\n        this.setState((state) => {\n            return {\n                degree: !state.degree,\n            };\n        });\n    };\n\n    shiftClick = () => {\n        this.setState((state) => {\n            return {\n                shift: !state.shift,\n            };\n        });\n    };\n\n    clearAll() {\n        this.setState({\n            value: null,\n            displayValue: '0',\n            operator: null,\n            waitingForOperand: false,\n            isDot: false,\n            done: false,\n            ee: false,\n            isMemoryActive: false,\n            isBracketsActive: false,\n            isRightBracket: false,\n            isLeftBracket: false,\n            isDigit: false,\n            isOperator: false,\n            countBracket: 0,\n            checkLeftBracket: false,\n        });\n    }\n\n    clearDisplay() {\n        this.setState({\n            displayValue: '0',\n        });\n    }\n\n    clearLastChar() {\n        const { displayValue } = this.state;\n\n        this.setState({\n            displayValue: displayValue.substring(0, displayValue.length - 1) || '0',\n        });\n    }\n\n    toggleSign() {\n        const { displayValue } = this.state;\n        const newValue = parseFloat(displayValue) * -1;\n\n        this.setState({\n            displayValue: String(newValue),\n        });\n    }\n\n    inputPercent() {\n        const { displayValue } = this.state;\n        const currentValue = parseFloat(displayValue);\n\n        if (currentValue === 0) return;\n\n        const fixedDigits = displayValue.replace(/^-?\\d*\\.?/, '');\n        const newValue = parseFloat(displayValue) / 100;\n\n        this.setState({\n            displayValue: String(newValue.toFixed(fixedDigits.length + 2)),\n            done: true,\n        });\n    }\n\n    inputDot() {\n        const {\n            displayValue,\n            waitingForOperand,\n            isDot,\n            isMemoryActive,\n            isBracketsActive,\n            countBracket,\n            isOperator,\n        } = this.state;\n\n        if (waitingForOperand === true) {\n            if (isBracketsActive === true && countBracket === 0) {\n                this.setState({\n                    displayValue: displayValue + '*0.',\n                    waitingForOperand: false,\n                });\n            } else if (isBracketsActive === true && isOperator === true) {\n                this.setState({\n                    displayValue: displayValue + '0.',\n                    waitingForOperand: false,\n                });\n            } else {\n                this.setState({ displayValue: '0.', waitingForOperand: false });\n            }\n        } else if (isDot === true) {\n            this.setState({\n                displayValue: displayValue + '.',\n                waitingForOperand: false,\n                isDot: true,\n            });\n        } else if (isMemoryActive === true) {\n            this.setState({\n                displayValue: '0.',\n                waitingForOperand: false,\n                isDot: true,\n            });\n        } else if (!/\\./.test(displayValue)) {\n            this.setState({\n                displayValue: displayValue + '.',\n                waitingForOperand: false,\n                isDot: true,\n            });\n        }\n    }\n\n    inputDigit(digit) {\n        const { displayValue, waitingForOperand, isDot, done } = this.state;\n\n        if (waitingForOperand) {\n            this.setState({\n                displayValue: String(digit),\n                waitingForOperand: false,\n                isDigit: true,\n            });\n        } else {\n            const hasDot = displayValue.includes('.');\n            const integer = displayValue.split('.')[0];\n\n            if (!hasDot && integer.length >= 10) return;\n\n            if (done === true) {\n                this.clearAll();\n                this.setState({\n                    displayValue: String(digit),\n                    isDigit: true,\n                    isOperator: false,\n                });\n            } else if (isDot === true) {\n                this.setState({ displayValue: displayValue + digit });\n            } else {\n                this.setState({\n                    displayValue: displayValue === '0' ? String(digit) : displayValue + digit,\n                    isDigit: true,\n                    isOperator: true,\n                    checkLeftBracket: false,\n                });\n            }\n        }\n    }\n\n    performOperation(nextOperator) {\n        const {\n            value,\n            displayValue,\n            operator,\n            waitingForOperand,\n            isMemoryActive,\n            isBracketsActive,\n            isDigit,\n            isOperator,\n            ee,\n            countBracket,\n        } = this.state;\n\n        if (nextOperator === '=' && countBracket !== 0) {\n            return this.setState({\n                displayValue: 'error',\n                isBracketsActive: false,\n                done: true,\n            });\n        }\n\n        if (isOperator === false) {\n            return this.setState({ displayValue });\n        }\n\n        if (isBracketsActive === true && nextOperator === '=') {\n            return this.setState({\n                displayValue: String(eval(displayValue)),\n                isBracketsActive: false,\n                done: true,\n            });\n        } else if (isBracketsActive === true) {\n            if (isDigit) {\n                this.setState({\n                    displayValue: displayValue + nextOperator,\n                    isOperator: false,\n                    isDigit: false,\n                    checkLeftBracket: false,\n                });\n            }\n        } else {\n            const inputValue = parseFloat(displayValue);\n\n            if (ee === true) {\n                const currentValue = displayValue.replace(/\\s/g, '');\n                return this.setState({\n                    displayValue: parseFloat(currentValue).toPrecision(),\n                    done: true,\n                    ee: false,\n                });\n            }\n\n            if (value == null) {\n                this.setState({\n                    value: inputValue,\n                });\n            } else if (\n                (operator && waitingForOperand === false) ||\n                (operator && isMemoryActive === true)\n            ) {\n                const currentValue = parseFloat(value) || 0;\n                const newValue = CalculatorOperations[operator](currentValue, inputValue);\n\n                this.setState({\n                    value: newValue,\n                    displayValue: String(newValue),\n                });\n            }\n\n            this.setState({\n                waitingForOperand: true,\n                operator: nextOperator,\n            });\n        }\n    }\n\n    keyDown = (event) => {\n        let { key } = event;\n\n        if (key === 'Enter') key = '=';\n\n        if (/\\d/.test(key)) {\n            event.preventDefault();\n            this.inputDigit(parseInt(key, 10));\n        } else if (key in CalculatorOperations) {\n            event.preventDefault();\n            this.performOperation(key);\n        } else if (key === '.') {\n            event.preventDefault();\n            this.inputDot();\n        } else if (key === '%') {\n            event.preventDefault();\n            this.inputPercent();\n        } else if (key === 'Backspace') {\n            event.preventDefault();\n            this.clearLastChar();\n        } else if (key === 'Clear') {\n            event.preventDefault();\n\n            if (this.state.displayValue !== '0') {\n                this.clearDisplay();\n            } else {\n                this.clearAll();\n            }\n        }\n    };\n\n    memoryClear() {\n        this.setState((prevState) => ({\n            memory: {\n                ...prevState.memory,\n                memory_plus: 0,\n                memory_minus: 0,\n                memory_recall: null,\n            },\n            isMemoryActive: false,\n        }));\n    }\n\n    memoryPlus() {\n        let temp = parseFloat(this.state.displayValue) + this.state.memory.memory_plus;\n        this.setState((prevState) => ({\n            memory: {\n                ...prevState.memory,\n                memory_plus: temp,\n            },\n            isMemoryActive: true,\n        }));\n    }\n\n    memoryMinus() {\n        let temp = parseInt(this.state.displayValue) + this.state.memory.memory_minus;\n        this.setState((prevState) => ({\n            memory: {\n                ...prevState.memory,\n                memory_minus: temp,\n            },\n            isMemoryActive: true,\n        }));\n    }\n\n    memoryRecall() {\n        const { isMemoryActive } = this.state;\n\n        let temp = (this.state.memory.memory_plus - this.state.memory.memory_minus).toString();\n\n        if (isMemoryActive) {\n            this.setState({\n                displayValue: temp,\n                isMemoryActive: true,\n            });\n        } else {\n            this.setState({\n                displayValue: temp,\n                isMemoryActive: false,\n            });\n        }\n    }\n\n    power2() {\n        const { displayValue } = this.state;\n        this.setState({ displayValue: String(Math.pow(parseFloat(displayValue), 2)), done: true });\n    }\n\n    power3() {\n        const { displayValue } = this.state;\n        this.setState({ displayValue: String(Math.pow(parseFloat(displayValue), 3)), done: true });\n    }\n\n    tenPowerX() {\n        const { displayValue } = this.state;\n        this.setState({ displayValue: String(Math.pow(10, parseFloat(displayValue))), done: true });\n    }\n\n    twoPowerX() {\n        const { displayValue } = this.state;\n        this.setState({ displayValue: String(Math.pow(2, parseFloat(displayValue))), done: true });\n    }\n\n    rand() {\n        this.setState({ displayValue: String(Math.random()) });\n    }\n\n    sin() {\n        const { displayValue, degree } = this.state;\n\n        if (degree === false) {\n            this.setState({ displayValue: String(Math.sin(displayValue)), done: true });\n        } else {\n            const result = String(Math.sin((parseFloat(displayValue) * Math.PI) / 180));\n            this.setState({ displayValue: result, done: true });\n        }\n    }\n\n    cos() {\n        const { displayValue, degree } = this.state;\n\n        if (degree === false) {\n            this.setState({ displayValue: String(Math.cos(displayValue)), done: true });\n        } else {\n            const result = String(Math.cos((parseInt(displayValue) * Math.PI) / 180));\n            this.setState({ displayValue: result, done: true });\n        }\n    }\n\n    tan() {\n        const { displayValue, degree } = this.state;\n\n        if (degree === false) {\n            this.setState({ displayValue: String(Math.tan(displayValue)), done: true });\n        } else {\n            if (displayValue === '90' || displayValue === '270') {\n                this.setState({ displayValue: 'Not a number' });\n            } else {\n                const result = String(Math.tan((parseFloat(displayValue) * Math.PI) / 180));\n                this.setState({ displayValue: result, done: true });\n            }\n        }\n    }\n\n    sinh() {\n        const { displayValue } = this.state;\n        const result = String(Math.sinh(parseFloat(displayValue)));\n        this.setState({ displayValue: result, done: true });\n    }\n\n    cosh() {\n        const { displayValue } = this.state;\n        const result = String(Math.cosh(parseFloat(displayValue)));\n        this.setState({ displayValue: result, done: true });\n    }\n\n    tanh() {\n        const { displayValue } = this.state;\n        const result = String(Math.tanh(parseFloat(displayValue)));\n        this.setState({ displayValue: result, done: true });\n    }\n\n    sinInverse() {\n        const { displayValue, degree } = this.state;\n\n        if (degree === false) {\n            this.setState({ displayValue: String(Math.asin(displayValue)), done: true });\n        } else {\n            const result = String((Math.asin(parseFloat(displayValue)) * 180) / Math.PI);\n            this.setState({ displayValue: result, done: true });\n        }\n    }\n\n    cosInverse() {\n        const { displayValue, degree } = this.state;\n\n        if (degree === false) {\n            this.setState({ displayValue: String(Math.acos(displayValue)), done: true });\n        } else {\n            const result = String((Math.acos(parseFloat(displayValue)) * 180) / Math.PI);\n            this.setState({ displayValue: result, done: true });\n        }\n    }\n\n    tanInverse() {\n        const { displayValue, degree } = this.state;\n\n        if (degree === false) {\n            this.setState({ displayValue: String(Math.atan(displayValue)), done: true });\n        } else {\n            const result = String((Math.atan(parseFloat(displayValue)) * 180) / Math.PI);\n            this.setState({ displayValue: result, done: true });\n        }\n    }\n\n    sinhInverse() {\n        const { displayValue } = this.state;\n        const result = String(Math.asinh(parseFloat(displayValue)));\n        this.setState({ displayValue: result, done: true });\n    }\n\n    coshInverse() {\n        const { displayValue } = this.state;\n        const result = String(Math.acosh(parseFloat(displayValue)));\n        this.setState({ displayValue: result, done: true });\n    }\n\n    tanhInverse() {\n        const { displayValue } = this.state;\n        const result = String(Math.atanh(parseFloat(displayValue)));\n        this.setState({ displayValue: result, done: true });\n    }\n\n    squareRoot() {\n        const { displayValue } = this.state;\n        this.setState({ displayValue: String(Math.sqrt(parseFloat(displayValue))), done: true });\n    }\n\n    cubeRoot() {\n        const { displayValue } = this.state;\n        this.setState({ displayValue: String(Math.cbrt(parseFloat(displayValue))), done: true });\n    }\n\n    factorial() {\n        const { displayValue } = this.state;\n\n        if (displayValue.indexOf('.') !== -1) {\n            return this.setState({ displayValue: 'NaN' });\n        }\n\n        if (displayValue === '1' || displayValue === '-1') {\n            return this.setState({ displayValue });\n        } else if (parseInt(displayValue) > 1) {\n            var result = 1;\n\n            for (var i = 1; i <= parseInt(displayValue); ++i) {\n                result *= i;\n            }\n\n            return this.setState({ displayValue: String(result), done: true });\n        } else if (parseInt(displayValue) < -1) {\n            var resultNegative = 1;\n\n            for (var j = -1; j >= parseInt(displayValue); j--) {\n                resultNegative *= j;\n            }\n\n            return this.setState({ displayValue: String(resultNegative), done: true });\n        }\n    }\n\n    log10() {\n        const { displayValue } = this.state;\n\n        if (parseInt(displayValue) <= 0) {\n            return this.setState({ displayValue: 'Not a Number' });\n        }\n\n        this.setState({ displayValue: String(Math.log10(parseFloat(displayValue))), done: true });\n    }\n\n    log2() {\n        const { displayValue } = this.state;\n\n        if (parseInt(displayValue) <= 0) {\n            return this.setState({ displayValue: 'Not a Number' });\n        }\n\n        this.setState({ displayValue: String(Math.log2(parseFloat(displayValue))), done: true });\n    }\n\n    log() {\n        const { displayValue } = this.state;\n\n        if (parseInt(displayValue) <= 0) {\n            return this.setState({ displayValue: 'Not a Number' });\n        }\n\n        this.setState({ displayValue: String(Math.log(parseFloat(displayValue))), done: true });\n    }\n\n    multiplicativeInverse() {\n        const { displayValue } = this.state;\n\n        if (displayValue === '0') {\n            return this.setState({ displayValue: 'error', done: true });\n        }\n\n        const result = String(1 / displayValue);\n        this.setState({ displayValue: result, done: true });\n    }\n\n    exponential() {\n        const { displayValue } = this.state;\n\n        if (displayValue === '0') {\n            return this.setState({ displayValue: '1' });\n        }\n\n        const result = String(Math.exp(parseFloat(displayValue)));\n        this.setState({ displayValue: result, done: true });\n    }\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.keyDown);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.keyDown);\n    }\n\n    ee() {\n        const { displayValue, done, ee } = this.state;\n\n        if (done === false) {\n            if (ee === true) {\n                this.setState({ displayValue });\n            } else {\n                this.setState({ displayValue: displayValue + ' e ', ee: true });\n            }\n        }\n    }\n\n    leftBracket() {\n        const { displayValue, isOperator, countBracket, checkLeftBracket } = this.state;\n\n        if (displayValue === '0') {\n            this.setState({\n                displayValue: '(',\n                isBracketsActive: true,\n                isLeftBracket: true,\n                isOperator: true,\n                countBracket: countBracket + 1,\n                checkLeftBracket: true,\n            });\n        } else if (isOperator === false || checkLeftBracket === true) {\n            this.setState({\n                displayValue: displayValue + '(',\n                isBracketsActive: true,\n                isLeftBracket: true,\n                isOperator: true,\n                countBracket: countBracket + 1,\n                checkLeftBracket: true,\n            });\n        } else {\n            this.setState({\n                displayValue: displayValue + '*(',\n                isBracketsActive: true,\n                isLeftBracket: true,\n                isOperator: true,\n                countBracket: countBracket + 1,\n                checkLeftBracket: true,\n            });\n        }\n    }\n\n    rightBracket() {\n        const { displayValue, isLeftBracket, isDigit, countBracket } = this.state;\n\n        if (isLeftBracket && isDigit) {\n            this.setState({\n                displayValue: displayValue + ')',\n                countBracket: countBracket - 1,\n            });\n        }\n    }\n\n    render() {\n        const { displayValue } = this.state;\n        const clearDisplay = displayValue !== '0';\n        const clearText = clearDisplay ? 'C' : 'AC';\n\n        return (\n            <div id='scientific-calculator'>\n                <div className='calculator-body'>\n                    <div class='resultContainer'>\n                        <div class='result'>\n                            <p>\n                                <CalculatorDisplay value={displayValue} />\n                            </p>\n                        </div>\n                    </div>\n                    <div className='button'>\n                        <div className='test'>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.leftBracket()}\n                            >\n                                (\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.rightBracket()}\n                            >\n                                )\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.memoryClear()}\n                            >\n                                mc\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.memoryPlus()}\n                            >\n                                m+\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.memoryMinus()}\n                            >\n                                m-\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.memoryRecall()}\n                            >\n                                mr\n                            </CalculatorKey>\n                            <CalculatorKey\n                                className='clear'\n                                style={{ backgroundColor: '#BB4444', color: '#F0F5F9' }}\n                                onPress={() =>\n                                    clearDisplay ? this.clearDisplay() : this.clearAll()\n                                }\n                            >\n                                {clearText}\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.toggleSign()}\n                            >\n                                -/+\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputPercent()}\n                            >\n                                %\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.performOperation('/')}\n                            >\n                                ÷\n                            </CalculatorKey>\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={this.shiftClick}\n                                >\n                                    2\n                                    <sup>\n                                        <small>nd</small>\n                                    </sup>\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={this.shiftClick}\n                                >\n                                    1\n                                    <sup>\n                                        <small>st</small>\n                                    </sup>\n                                </CalculatorKey>\n                            )}\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.power2()}\n                            >\n                                x\n                                <sup>\n                                    <small>2</small>\n                                </sup>\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.power3()}\n                            >\n                                x\n                                <sup>\n                                    <small>3</small>\n                                </sup>\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.performOperation('xPowY')}\n                            >\n                                x\n                                <sup>\n                                    <small>y</small>\n                                </sup>\n                            </CalculatorKey>\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.exponential()}\n                                >\n                                    e\n                                    <sup>\n                                        <small>x</small>\n                                    </sup>\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.performOperation('yPowX')}\n                                >\n                                    y\n                                    <sup>\n                                        <small>x</small>\n                                    </sup>\n                                </CalculatorKey>\n                            )}\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.tenPowerX()}\n                                >\n                                    10\n                                    <sup>\n                                        <small>x</small>\n                                    </sup>\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.twoPowerX()}\n                                >\n                                    2\n                                    <sup>\n                                        <small>x</small>\n                                    </sup>\n                                </CalculatorKey>\n                            )}\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(7)}\n                            >\n                                7\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(8)}\n                            >\n                                8\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(9)}\n                            >\n                                9\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.performOperation('*')}\n                            >\n                                ×\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.multiplicativeInverse()}\n                            >\n                                1/x\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.squareRoot()}\n                            >\n                                <sup>\n                                    <small>2</small>\n                                </sup>\n                                √\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.cubeRoot()}\n                            >\n                                <sup>\n                                    <small>3</small>\n                                </sup>\n                                √\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.performOperation('nthRoot')}\n                            >\n                                <sup>\n                                    <small>x</small>\n                                </sup>\n                                √\n                            </CalculatorKey>\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.log()}\n                                >\n                                    ln\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.performOperation('logY')}\n                                >\n                                    log\n                                    <sub>\n                                        <small>y</small>\n                                    </sub>\n                                </CalculatorKey>\n                            )}\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.log10()}\n                                >\n                                    log\n                                    <sub>\n                                        <small>10</small>\n                                    </sub>\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.log2()}\n                                >\n                                    log\n                                    <sub>\n                                        <small>2</small>\n                                    </sub>\n                                </CalculatorKey>\n                            )}\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(4)}\n                            >\n                                4\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(5)}\n                            >\n                                5\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(6)}\n                            >\n                                6\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.performOperation('-')}\n                            >\n                                −\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.factorial()}\n                            >\n                                x!\n                            </CalculatorKey>\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.sin()}\n                                >\n                                    sin\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.sinInverse()}\n                                >\n                                    sin\n                                    <sup>\n                                        <small>-1</small>\n                                    </sup>\n                                </CalculatorKey>\n                            )}\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.cos()}\n                                >\n                                    cos\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.cosInverse()}\n                                >\n                                    cos\n                                    <sup>\n                                        <small>-1</small>\n                                    </sup>\n                                </CalculatorKey>\n                            )}\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.tan()}\n                                >\n                                    tan\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.tanhInverse()}\n                                >\n                                    tan\n                                    <sup>\n                                        <small>-1</small>\n                                    </sup>\n                                </CalculatorKey>\n                            )}\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(Math.exp(1))}\n                            >\n                                e\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.ee()}\n                            >\n                                EE\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(1)}\n                            >\n                                1\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(2)}\n                            >\n                                2\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(3)}\n                            >\n                                3\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.performOperation('+')}\n                            >\n                                +\n                            </CalculatorKey>\n                            {!this.state.degree ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={this.degreeClick}\n                                >\n                                    Rad\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={this.degreeClick}\n                                >\n                                    Deg\n                                </CalculatorKey>\n                            )}\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.sinh()}\n                                >\n                                    sinh\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.sinhInverse()}\n                                >\n                                    sinh\n                                    <sup>\n                                        <small>-1</small>\n                                    </sup>\n                                </CalculatorKey>\n                            )}\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.cosh()}\n                                >\n                                    cosh\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.coshInverse()}\n                                >\n                                    cosh\n                                    <sup>\n                                        <small>-1</small>\n                                    </sup>\n                                </CalculatorKey>\n                            )}\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.tanh()}\n                                >\n                                    tanh\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.tanhInverse()}\n                                >\n                                    tanh\n                                    <sup>\n                                        <small>-1</small>\n                                    </sup>\n                                </CalculatorKey>\n                            )}\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(Math.PI)}\n                            >\n                                π\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.rand()}\n                            >\n                                Rand\n                            </CalculatorKey>\n                            <CalculatorKey\n                                className='zero'\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(0)}\n                            >\n                                0\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDot()}\n                            >\n                                .\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#c9d6df', color: '#52616b' }}\n                                onPress={() => this.performOperation('=')}\n                            >\n                                =\n                            </CalculatorKey>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ScientificCalculator;\n","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/Header.js",["110"],"/Users/cheakimhokmao/Documents/cs313_team_one/src/components/randomizer/App.js",["111","112","113"],"/Users/cheakimhokmao/Documents/cs313_team_one/src/components/randomizer/InformationRandomizer.js",["114"],"/Users/cheakimhokmao/Documents/cs313_team_one/src/components/services/UrlService.js",[],"/Users/cheakimhokmao/Documents/cs313_team_one/src/components/basicCal/component/App.js",[],"/Users/cheakimhokmao/Documents/cs313_team_one/src/components/SideMenu.js",[],"/Users/cheakimhokmao/Documents/cs313_team_one/src/components/randomizer/Body.js",["115","116","117"],"/Users/cheakimhokmao/Documents/cs313_team_one/src/components/randomizer/Nav.js",["118"],"/Users/cheakimhokmao/Documents/cs313_team_one/src/components/basicCal/component/ButtonPanel.js",[],"/Users/cheakimhokmao/Documents/cs313_team_one/src/components/basicCal/component/Display.js",[],"/Users/cheakimhokmao/Documents/cs313_team_one/src/components/basicCal/logic/calculate.js",["119","120"],"/Users/cheakimhokmao/Documents/cs313_team_one/src/components/basicCal/component/Button.js",[],"/Users/cheakimhokmao/Documents/cs313_team_one/src/components/basicCal/logic/operate.js",["121"],"/Users/cheakimhokmao/Documents/cs313_team_one/src/components/basicCal/logic/isNumber.js",[],{"ruleId":"122","severity":1,"message":"123","line":62,"column":63,"nodeType":"124","messageId":"125","endLine":62,"endColumn":64,"suggestions":"126"},{"ruleId":"122","severity":1,"message":"123","line":62,"column":79,"nodeType":"124","messageId":"125","endLine":62,"endColumn":80,"suggestions":"127"},{"ruleId":"122","severity":1,"message":"123","line":58,"column":63,"nodeType":"124","messageId":"125","endLine":58,"endColumn":64,"suggestions":"128"},{"ruleId":"122","severity":1,"message":"123","line":58,"column":79,"nodeType":"124","messageId":"125","endLine":58,"endColumn":80,"suggestions":"129"},{"ruleId":"130","severity":1,"message":"131","line":8,"column":10,"nodeType":"132","messageId":"133","endLine":8,"endColumn":14},{"ruleId":"122","severity":1,"message":"123","line":45,"column":63,"nodeType":"124","messageId":"125","endLine":45,"endColumn":64,"suggestions":"134"},{"ruleId":"122","severity":1,"message":"123","line":45,"column":79,"nodeType":"124","messageId":"125","endLine":45,"endColumn":80,"suggestions":"135"},{"ruleId":"130","severity":1,"message":"136","line":1,"column":25,"nodeType":"132","messageId":"133","endLine":1,"endColumn":33},{"ruleId":"130","severity":1,"message":"137","line":4,"column":10,"nodeType":"132","messageId":"133","endLine":4,"endColumn":28},{"ruleId":"130","severity":1,"message":"131","line":7,"column":10,"nodeType":"132","messageId":"133","endLine":7,"endColumn":14},{"ruleId":"138","severity":1,"message":"139","line":305,"column":38,"nodeType":"140","messageId":"141","endLine":305,"endColumn":42},{"ruleId":"130","severity":1,"message":"142","line":8,"column":8,"nodeType":"132","messageId":"133","endLine":8,"endColumn":14},{"ruleId":"130","severity":1,"message":"143","line":1,"column":8,"nodeType":"132","messageId":"133","endLine":1,"endColumn":13},{"ruleId":"130","severity":1,"message":"144","line":4,"column":10,"nodeType":"132","messageId":"133","endLine":4,"endColumn":19},{"ruleId":"130","severity":1,"message":"145","line":4,"column":26,"nodeType":"132","messageId":"133","endLine":4,"endColumn":29},{"ruleId":"130","severity":1,"message":"131","line":7,"column":10,"nodeType":"132","messageId":"133","endLine":7,"endColumn":14},{"ruleId":"130","severity":1,"message":"146","line":1,"column":17,"nodeType":"132","messageId":"133","endLine":1,"endColumn":32},{"ruleId":"130","severity":1,"message":"147","line":3,"column":10,"nodeType":"132","messageId":"133","endLine":3,"endColumn":17},{"ruleId":"148","severity":1,"message":"149","line":28,"column":32,"nodeType":"150","messageId":"141","endLine":28,"endColumn":34},{"ruleId":"130","severity":1,"message":"151","line":20,"column":9,"nodeType":"132","messageId":"133","endLine":20,"endColumn":23},{"ruleId":"130","severity":1,"message":"152","line":1,"column":8,"nodeType":"132","messageId":"133","endLine":1,"endColumn":11},{"ruleId":"148","severity":1,"message":"153","line":56,"column":19,"nodeType":"150","messageId":"141","endLine":56,"endColumn":21},{"ruleId":"148","severity":1,"message":"149","line":20,"column":13,"nodeType":"150","messageId":"141","endLine":20,"endColumn":15},"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["154","155"],["156","157"],["158","159"],["160","161"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar",["162","163"],["164","165"],"'useState' is defined but never used.","'BsFillEnvelopeFill' is defined but never used.","no-eval","eval can be harmful.","CallExpression","unexpected","'Avatar' is defined but never used.","'react' is defined but never used.","'Container' is defined but never used.","'Col' is defined but never used.","'useLayoutEffect' is defined but never used.","'useForm' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'randomizer_nav' is assigned a value but never used.","'Big' is defined but never used.","Expected '!==' and instead saw '!='.",{"messageId":"166","fix":"167","desc":"168"},{"messageId":"169","fix":"170","desc":"171"},{"messageId":"166","fix":"172","desc":"168"},{"messageId":"169","fix":"173","desc":"171"},{"messageId":"166","fix":"174","desc":"168"},{"messageId":"169","fix":"175","desc":"171"},{"messageId":"166","fix":"176","desc":"168"},{"messageId":"169","fix":"177","desc":"171"},{"messageId":"166","fix":"178","desc":"168"},{"messageId":"169","fix":"179","desc":"171"},{"messageId":"166","fix":"180","desc":"168"},{"messageId":"169","fix":"181","desc":"171"},"removeEscape",{"range":"182","text":"183"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"184","text":"185"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"186","text":"183"},{"range":"187","text":"185"},{"range":"188","text":"183"},{"range":"189","text":"185"},{"range":"190","text":"183"},{"range":"191","text":"185"},{"range":"192","text":"183"},{"range":"193","text":"185"},{"range":"194","text":"183"},{"range":"195","text":"185"},[2284,2285],"",[2284,2284],"\\",[2300,2301],[2300,2300],[2275,2276],[2275,2275],[2291,2292],[2291,2291],[1946,1947],[1946,1946],[1962,1963],[1962,1962]]
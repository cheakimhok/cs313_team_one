[{"/Users/venxinglay/Desktop/cs313_team_one/src/index.js":"1","/Users/venxinglay/Desktop/cs313_team_one/src/reportWebVitals.js":"2","/Users/venxinglay/Desktop/cs313_team_one/src/App.js":"3","/Users/venxinglay/Desktop/cs313_team_one/src/components/Main.js":"4","/Users/venxinglay/Desktop/cs313_team_one/src/components/Header.js":"5","/Users/venxinglay/Desktop/cs313_team_one/src/components/SignUp.js":"6","/Users/venxinglay/Desktop/cs313_team_one/src/components/ConfirmEmail.js":"7","/Users/venxinglay/Desktop/cs313_team_one/src/components/SignIn.js":"8","/Users/venxinglay/Desktop/cs313_team_one/src/components/ConfirmPassword.js":"9","/Users/venxinglay/Desktop/cs313_team_one/src/components/SideMenu.js":"10","/Users/venxinglay/Desktop/cs313_team_one/src/components/services/UrlService.js":"11","/Users/venxinglay/Desktop/cs313_team_one/src/components/services/AuthService.js":"12","/Users/venxinglay/Desktop/cs313_team_one/src/components/services/CookieService.js":"13","/Users/venxinglay/Desktop/cs313_team_one/src/components/randomizer/App.js":"14","/Users/venxinglay/Desktop/cs313_team_one/src/components/converter/App.js":"15","/Users/venxinglay/Desktop/cs313_team_one/src/components/converter/Nav.js":"16"},{"size":478,"mtime":1612761295864,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1610899975235,"results":"19","hashOfConfig":"18"},{"size":290,"mtime":1612761295859,"results":"20","hashOfConfig":"18"},{"size":2025,"mtime":1612789088420,"results":"21","hashOfConfig":"18"},{"size":2222,"mtime":1612859797499,"results":"22","hashOfConfig":"18"},{"size":7660,"mtime":1612760727233,"results":"23","hashOfConfig":"18"},{"size":4177,"mtime":1612762849906,"results":"24","hashOfConfig":"18"},{"size":6035,"mtime":1612761295863,"results":"25","hashOfConfig":"18"},{"size":7350,"mtime":1612795323314,"results":"26","hashOfConfig":"18"},{"size":482,"mtime":1612761295862,"results":"27","hashOfConfig":"18"},{"size":1168,"mtime":1612789364415,"results":"28","hashOfConfig":"18"},{"size":969,"mtime":1612760727245,"results":"29","hashOfConfig":"18"},{"size":331,"mtime":1612760727246,"results":"30","hashOfConfig":"18"},{"size":282,"mtime":1612761973403,"results":"31","hashOfConfig":"18"},{"size":688,"mtime":1612894420695,"results":"32","hashOfConfig":"18"},{"size":828,"mtime":1612881556054,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"b9ztk1",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/venxinglay/Desktop/cs313_team_one/src/index.js",[],["72","73"],"/Users/venxinglay/Desktop/cs313_team_one/src/reportWebVitals.js",[],"/Users/venxinglay/Desktop/cs313_team_one/src/App.js",[],"/Users/venxinglay/Desktop/cs313_team_one/src/components/Main.js",[],"/Users/venxinglay/Desktop/cs313_team_one/src/components/Header.js",[],"/Users/venxinglay/Desktop/cs313_team_one/src/components/SignUp.js",["74","75"],"import React, { useRef } from 'react';\n\nimport { Container, Col, Row, Form, Button } from 'react-bootstrap';\nimport { BsFillEnvelopeFill, BsLockFill } from 'react-icons/bs';\nimport { useForm } from 'react-hook-form';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport UrlService from './services/UrlService';\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom.min';\n\nconst SignUp = (props) => {\n    const { register, handleSubmit, errors, watch } = useForm({\n        criteriaMode: 'all',\n    });\n\n    const history = useHistory();\n    const onSubmit = (data) => {\n\n        axios.post(UrlService.registerUrl(), data).then(\n            res => {\n                if(res.data.user) {\n                    localStorage.setItem('access_token', res.data.access_token);\n                    props.setUser(res.data.user);\n                    history.push('/randomizer')\n                } \n                \n            }\n        ).catch (\n            err => {\n                console.log(err)\n                alert(\"This gmail is already exist\")\n            }\n        )\n    }\n\n    const password = useRef({});\n    password.current = watch('password', '');\n\n    return (\n        <>\n            <Container id='sign-up'>\n                <Row className='justify-content-center'>\n                    <p className='form-title'>Sign Up</p>\n                </Row>\n                <Row className='justify-content-center paragraph'>\n                    <p className='mb-5 form-subtitle'>Create Your Free Account</p>\n                </Row>\n                <Form fluid='md' onSubmit={handleSubmit(onSubmit)}>\n                    <Row className='justify-content-center'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text'>\n                                <Form.Label className='form-label'>Email</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        autoComplete='off'\n                                        ref={register({\n                                            required: 'This is required.',\n                                            pattern: {\n                                                value: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n                                                message: 'Invalid Email Address',\n                                            },\n                                        })}\n                                        name='email'\n                                        className='from-control'\n                                        type='email'\n                                        placeholder='Enter Email'\n                                        required\n                                    />\n                                    {errors.email && <p style={{ color: 'red' }}>{errors.email.message}</p>}\n\n                                    <BsFillEnvelopeFill className='input-icon' />\n                                </div>\n                                <Form.Text className='text-muted'></Form.Text>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className='justify-content-center'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text'>\n                                <Form.Label className='form-label'>Password</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        autoComplete='off'\n                                        name='password'\n                                        type='password'\n                                        ref={register({\n                                            required: 'This is required.',\n                                            minLength: {\n                                                value: 8,\n                                                message: 'Password must have at least 8 characters',\n                                            },\n                                            maxLength: {\n                                                value: 20,\n                                                message: 'Password must have less than 20 characters',\n                                            },\n                                        })}\n                                        required\n                                        placeholder='Enter password'\n                                    />\n                                    {errors.password && (\n                                        <p style={{ color: 'red' }}>{errors.password.message}</p>\n                                    )}\n                                    <BsLockFill className='input-icon'></BsLockFill>\n                                </div>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className='justify-content-center mb-3'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text'>\n                                <Form.Label className='form-label'>Confirm Password</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        autoComplete='off'\n                                        required\n                                        placeholder='Confirm Password'\n                                        name='password_confirmation'\n                                        type='password'\n                                        ref={register({\n                                            validate: (value) =>\n                                                value === password.current || 'The passwords do not match',\n                                        })}\n                                    />\n                                    {errors.password_confirmation && (\n                                        <p style={{ color: 'red' }}>{errors.password_confirmation.message}</p>\n                                    )}\n                                    <BsLockFill className='input-icon'></BsLockFill>\n                                </div>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className='mb-4'>\n                        <Col style={{ textAlign: 'center' }}>\n                            Already have an account?\n                            <Link\n                                to='/signin'\n                                style={{\n                                    color: '#52616b',\n                                    fontWeight: '600px',\n                                    marginLeft: '5px',\n                                    textDecoration: 'none',\n                                }}>\n                                Sign In\n                            </Link>\n                        </Col>\n                    </Row>\n                    <Row className='mb-4'>\n                        <Col style={{ textAlign: 'center' }}>\n                            <Button className='sign-button' variant='white' type='submit'>\n                                Sign Up\n                            </Button>\n                        </Col>\n                    </Row>\n                </Form>\n            </Container>\n        </>\n    );\n};\n\nexport default SignUp;","/Users/venxinglay/Desktop/cs313_team_one/src/components/ConfirmEmail.js",["76","77","78"],"import React from 'react';\nimport './Authentication.css';\nimport { Container, Col, Row, Form, Button } from 'react-bootstrap';\nimport { BsFillEnvelopeFill } from 'react-icons/bs';\nimport { useForm } from 'react-hook-form';\nimport { ErrorMessage } from '@hookform/error-message';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport UrlService from './services/UrlService';\n\nconst ConfirmEmail = () => {\n    const { register, handleSubmit, errors } = useForm({\n        criteriaMode: 'all',\n    });\n\n    const onSubmit = (data) => {\n        axios.post(UrlService.forgotUrl(), data).then((res) => {\n            console.log(res);\n        }).catch((err) => {\n            console.log(err);\n        });\n    };\n\n    return (\n        <>\n            <Container id='confirm-email'>\n                <Row className='justify-content-center'>\n                    <p className='form-title'>Reset Password</p>\n                </Row>\n                <Row className='justify-content-center paragraph'>\n                    <p className='mb-5 form-subtitle'>Please enter your email</p>\n                </Row>\n                <Form fluid='md' onSubmit={handleSubmit(onSubmit)}>\n                    <Row className='justify-content-center'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text' controlId='formBasicEmail'>\n                                <Form.Label className='form-label'>Email</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        autoComplete='off'\n                                        ref={register({\n                                            required: 'This is required.',\n                                            pattern: {\n                                                value: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n                                                message: 'Invalid Email Address',\n                                            },\n                                        })}\n                                        name='email'\n                                        className='from-control'\n                                        type='email'\n                                        placeholder='Enter Email'\n                                        required\n                                    />\n                                    <ErrorMessage\n                                        errors={errors}\n                                        name='email'\n                                        render={({ messages }) => {\n                                            return messages\n                                                ? Object.entries(messages).map(\n                                                      ([type, message]) => (\n                                                          <p style={{ color: 'red' }} key={type}>\n                                                              {message}\n                                                          </p>\n                                                      )\n                                                  )\n                                                : null;\n                                        }}\n                                    />\n                                    <BsFillEnvelopeFill className='input-icon' />\n                                </div>\n                                <Form.Text className='text-muted'></Form.Text>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <br></br>\n                    <br></br>\n                    <Row className='mb-4'>\n                        <Col style={{ textAlign: 'center' }}>\n                            <Button className='confirm-email-button' variant='white' type='submit'>\n                                Send Password Reset Link\n                            </Button>\n                        </Col>\n                    </Row>\n                </Form>\n            </Container>\n        </>\n    );\n};\n\nexport default ConfirmEmail;\n","/Users/venxinglay/Desktop/cs313_team_one/src/components/SignIn.js",["79","80"],"\nimport '../App.css';\nimport { Container, Col, Row, Form, Button } from 'react-bootstrap';\nimport { BsFillEnvelopeFill, BsLockFill } from 'react-icons/bs';\nimport { useForm } from 'react-hook-form';\nimport { ErrorMessage } from '@hookform/error-message';\nimport { Link } from 'react-router-dom';\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom.min';\nimport AuthService from './services/AuthService'\n\n\n\n\n\n\n\nconst SignIn = (props) => {\n    const history = useHistory();\n    const { register, handleSubmit, errors } = useForm({\n        criteriaMode: 'all',\n    });\n\n\n\n    async function onSubmit(data) {\n\n        const response = await AuthService.doUserLogin(data);\n\n        if (response.message === 'Invalid Credentials') {\n            alert(\"Please check your credentials and try agian\");\n            localStorage.clear();\n          } else {\n            localStorage.setItem('access_token', response.access_token) \n            props.setUser(response.user);\n            history.push('/randomizer')\n          }\n    }\n\n    return (\n        <>\n            <Container id='sign-in'>\n                <Row className='justify-content-center'>\n                    <p className='form-title'>Sign In</p>\n                </Row>\n                <Row className='justify-content-center paragraph'>\n                    <p className='mb-5 form-subtitle'>Let's Get Started</p>\n                </Row>\n                <Form fluid='md' onSubmit={handleSubmit(onSubmit)}>\n                    <Row className='justify-content-center'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text' controlId='formBasicEmail'>\n                                <Form.Label className='form-label'>Email</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        autoComplete='off'\n                                        ref={register({\n                                            required: 'This is required.',\n                                            pattern: {\n                                                value: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n                                                message: 'Invalid Email Address',\n                                            },\n                                        })}\n                                        name='email'\n                                        className='from-control'\n                                        type='email'\n                                        placeholder='Enter Email'\n                                        required\n                                    />\n                                    <ErrorMessage\n                                        errors={errors}\n                                        name='email'\n                                        render={({ messages }) => {\n                                            return messages\n                                                ? Object.entries(messages).map(([type, message]) => (\n                                                      <p style={{ color: 'red' }} key={type}>\n                                                          {message}\n                                                      </p>\n                                                  ))\n                                                : null;\n                                        }}\n                                    />\n                                    <BsFillEnvelopeFill className='input-icon' />\n                                </div>\n                                <Form.Text className='text-muted'></Form.Text>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className='justify-content-center'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text' controlId='formBasicPassword'>\n                                <Form.Label className='form-label'>Password</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        className='from-control'\n                                        type='password'\n                                        placeholder='Enter Password'\n                                        name='password'\n                                        ref={register({\n                                            required: 'This is required.'})}\n                                        required\n                                    />\n                                    <BsLockFill className='input-icon'></BsLockFill>\n                                </div>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className='mb-4 mt-3'>\n                        <Col style={{ textAlign: 'center' }}>\n                            Don't have an account yet?\n                            <Link\n                                to='/signup'\n                                style={{\n                                    fontSize: '800',\n                                    color: '#52616b',\n                                    marginLeft: '5px',\n                                    textDecoration: 'none',\n                                }}>\n                                Sign Up\n                            </Link>\n                        </Col>\n                    </Row>\n                    <Row className='mb-4'>\n                        <Col style={{ textAlign: 'center' }}>\n                            <Button className='sign-button' variant='white' type='submit'>\n                                Sign In\n                            </Button>\n                        </Col>\n                    </Row>\n                </Form>\n            </Container>\n        </>\n    );\n};\n\nexport default SignIn;","/Users/venxinglay/Desktop/cs313_team_one/src/components/ConfirmPassword.js",["81","82","83","84"],"import React, { useRef, useState } from 'react';\nimport './Authentication.css';\nimport { Container, Col, Row, Form, Button } from 'react-bootstrap';\nimport { BsFillEnvelopeFill, BsLockFill } from 'react-icons/bs';\nimport { useForm } from 'react-hook-form';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport UrlService from './services/UrlService';\n\nconst ConfirmPassword = (props) => {\n    const { register, handleSubmit, errors, watch } = useForm({\n        criteriaMode: 'all',\n        defaultValues: {\n            token: props.match.params.token,\n          }\n    });\n\n\n\n\n    const onSubmit = (data) => {\n        axios.post(UrlService.resetPasswordUrl(), data).then((result) => {\n            console.log(result);\n        }).catch((err) => {\n            console.log(err);\n        });\n    };\n    \n\n    const password = useRef({});\n    password.current = watch('password', '');\n\n    return (\n        <>\n            <Container id='confirm-password'>\n                <Row className='justify-content-center'>\n                    <p className='form-title'>Reset Password</p>\n                </Row>\n                <Row className='justify-content-center paragraph'>\n                    <p className='mb-5 form-subtitle'>Please enter your new password</p>\n                </Row>\n                <Form fluid='md' onSubmit={handleSubmit(onSubmit)}>\n                    <Row className='justify-content-center'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text'>\n                                <Form.Label className='form-label'>Email</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        autoComplete='off'\n                                        ref={register({\n                                            required: 'This is required.',\n                                            pattern: {\n                                                value: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n                                                message: 'Invalid Email Address',\n                                            },\n                                        })}\n                                        name='email'\n                                        className='from-control'\n                                        type='email'\n                                        placeholder='Enter Email'\n                                        required\n                                    />\n                                    {errors.email && (\n                                        <p style={{ color: 'red' }}>{errors.email.message}</p>\n                                    )}\n\n                                    <BsFillEnvelopeFill className='input-icon' />\n                                </div>\n                                <Form.Text className='text-muted'></Form.Text>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className='justify-content-center'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text'>\n                                <Form.Label className='form-label'>New Password</Form.Label>\n                                <div className='input-field'>\n                                <Form.Control\n                                        autoComplete='off'\n                                        name='token'\n                                        type='hidden'\n                                        ref={register}\n                                    />\n                                    <Form.Control\n                                        autoComplete='off'\n                                        name='password'\n                                        type='password'\n                                        ref={register({\n                                            required: 'This is required.',\n                                            minLength: {\n                                                value: 8,\n                                                message: 'Password must have at least 8 characters',\n                                            },\n                                            maxLength: {\n                                                value: 20,\n                                                message:\n                                                    'Password must have less than 20 characters',\n                                            },\n                                        })}\n                                        required\n                                        placeholder='Enter password'\n                                    />\n                                    {errors.password && (\n                                        <p style={{ color: 'red' }}>{errors.password.message}</p>\n                                    )}\n                                    <BsLockFill className='input-icon'></BsLockFill>\n                                </div>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className='justify-content-center mb-3'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text'>\n                                <Form.Label className='form-label'>Confirm Password</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        autoComplete='off'\n                                        required\n                                        placeholder='Confirm Password'\n                                        name='password_confirmation'\n                                        type='password'\n                                        ref={register({\n                                            validate: (value) =>\n                                                value === password.current ||\n                                                'The passwords do not match',\n                                        })}\n                                    />\n                                    {errors.password_repeat && (\n                                        <p style={{ color: 'red' }}>\n                                            {errors.password_repeat.message}\n                                        </p>\n                                    )}\n                                    <BsLockFill className='input-icon'></BsLockFill>\n                                </div>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <br></br>\n                    <Row className='mb-4'>\n                        <Col style={{ textAlign: 'center' }}>\n                            <Button className='confirm-password-button' variant='white' type='submit'>\n                                Reset Password\n                            </Button>\n                        </Col>\n                    </Row>\n                </Form>\n            </Container>\n        </>\n    );\n};\n\nexport default ConfirmPassword;\n","/Users/venxinglay/Desktop/cs313_team_one/src/components/SideMenu.js",[],"/Users/venxinglay/Desktop/cs313_team_one/src/components/services/UrlService.js",[],"/Users/venxinglay/Desktop/cs313_team_one/src/components/services/AuthService.js",[],"/Users/venxinglay/Desktop/cs313_team_one/src/components/services/CookieService.js",[],"/Users/venxinglay/Desktop/cs313_team_one/src/components/randomizer/App.js",["85"],"import react, {Component} from 'react';\n\nexport default class randomizer extends Component {\n    render() {\n        if (this.props.user) {\n            return <div>Hello {this.props.user.email}</div>\n        }\n        return (\n            <div>Hello world!!</div>\n        )\n    }\n};\n","/Users/venxinglay/Desktop/cs313_team_one/src/components/converter/App.js",["86"],"/Users/venxinglay/Desktop/cs313_team_one/src/components/converter/Nav.js",["87","88"],{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":59,"column":63,"nodeType":"95","messageId":"96","endLine":59,"endColumn":64,"suggestions":"97"},{"ruleId":"93","severity":1,"message":"94","line":59,"column":79,"nodeType":"95","messageId":"96","endLine":59,"endColumn":80,"suggestions":"98"},{"ruleId":"99","severity":1,"message":"100","line":8,"column":10,"nodeType":"101","messageId":"102","endLine":8,"endColumn":14},{"ruleId":"93","severity":1,"message":"94","line":44,"column":63,"nodeType":"95","messageId":"96","endLine":44,"endColumn":64,"suggestions":"103"},{"ruleId":"93","severity":1,"message":"94","line":44,"column":79,"nodeType":"95","messageId":"96","endLine":44,"endColumn":80,"suggestions":"104"},{"ruleId":"93","severity":1,"message":"94","line":59,"column":63,"nodeType":"95","messageId":"96","endLine":59,"endColumn":64,"suggestions":"105"},{"ruleId":"93","severity":1,"message":"94","line":59,"column":79,"nodeType":"95","messageId":"96","endLine":59,"endColumn":80,"suggestions":"106"},{"ruleId":"99","severity":1,"message":"107","line":1,"column":25,"nodeType":"101","messageId":"102","endLine":1,"endColumn":33},{"ruleId":"99","severity":1,"message":"100","line":7,"column":10,"nodeType":"101","messageId":"102","endLine":7,"endColumn":14},{"ruleId":"93","severity":1,"message":"94","line":53,"column":63,"nodeType":"95","messageId":"96","endLine":53,"endColumn":64,"suggestions":"108"},{"ruleId":"93","severity":1,"message":"94","line":53,"column":79,"nodeType":"95","messageId":"96","endLine":53,"endColumn":80,"suggestions":"109"},{"ruleId":"99","severity":1,"message":"110","line":1,"column":8,"nodeType":"101","messageId":"102","endLine":1,"endColumn":13},{"ruleId":"111","severity":1,"message":"112","line":9,"column":1,"nodeType":"113","endLine":32,"endColumn":2},{"ruleId":"99","severity":1,"message":"114","line":1,"column":42,"nodeType":"101","messageId":"102","endLine":1,"endColumn":45},{"ruleId":"99","severity":1,"message":"100","line":2,"column":10,"nodeType":"101","messageId":"102","endLine":2,"endColumn":14},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["117","118"],["119","120"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar",["121","122"],["123","124"],["125","126"],["127","128"],"'useState' is defined but never used.",["129","130"],["131","132"],"'react' is defined but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous class","ExportDefaultDeclaration","'Tab' is defined but never used.","no-global-assign","no-unsafe-negation",{"messageId":"133","fix":"134","desc":"135"},{"messageId":"136","fix":"137","desc":"138"},{"messageId":"133","fix":"139","desc":"135"},{"messageId":"136","fix":"140","desc":"138"},{"messageId":"133","fix":"141","desc":"135"},{"messageId":"136","fix":"142","desc":"138"},{"messageId":"133","fix":"143","desc":"135"},{"messageId":"136","fix":"144","desc":"138"},{"messageId":"133","fix":"145","desc":"135"},{"messageId":"136","fix":"146","desc":"138"},{"messageId":"133","fix":"147","desc":"135"},{"messageId":"136","fix":"148","desc":"138"},{"messageId":"133","fix":"149","desc":"135"},{"messageId":"136","fix":"150","desc":"138"},{"messageId":"133","fix":"151","desc":"135"},{"messageId":"136","fix":"152","desc":"138"},"removeEscape",{"range":"153","text":"154"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"155","text":"156"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"157","text":"154"},{"range":"158","text":"156"},{"range":"159","text":"154"},{"range":"160","text":"156"},{"range":"161","text":"154"},{"range":"162","text":"156"},{"range":"163","text":"154"},{"range":"164","text":"156"},{"range":"165","text":"154"},{"range":"166","text":"156"},{"range":"167","text":"154"},{"range":"168","text":"156"},{"range":"169","text":"154"},{"range":"170","text":"156"},[2313,2314],"",[2313,2313],"\\",[2329,2330],[2329,2329],[1895,1896],[1895,1895],[1911,1912],[1911,1911],[2184,2185],[2184,2184],[2200,2201],[2200,2200],[2054,2055],[2054,2054],[2070,2071],[2070,2070]]
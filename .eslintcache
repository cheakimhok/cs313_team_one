[{"/Users/cheakimhokmao/Documents/cs313_team_one/src/index.js":"1","/Users/cheakimhokmao/Documents/cs313_team_one/src/App.js":"2","/Users/cheakimhokmao/Documents/cs313_team_one/src/reportWebVitals.js":"3","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/Main.js":"4","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/SignIn.js":"5","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/SignUp.js":"6","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/ConfirmEmail.js":"7","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/ConfirmPassword.js":"8","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/UnitConverter.js":"9","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/ScientificCalculator.js":"10","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/Header.js":"11","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/randomizer/App.js":"12","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/randomizer/InformationRandomizer.js":"13","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/services/UrlService.js":"14","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/basicCal/component/App.js":"15","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/SideMenu.js":"16","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/randomizer/Body.js":"17","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/randomizer/Nav.js":"18","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/basicCal/component/ButtonPanel.js":"19","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/basicCal/component/Display.js":"20","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/basicCal/logic/calculate.js":"21","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/basicCal/component/Button.js":"22","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/basicCal/logic/operate.js":"23","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/basicCal/logic/isNumber.js":"24"},{"size":603,"mtime":1614703352042,"results":"25","hashOfConfig":"26"},{"size":290,"mtime":1614703352036,"results":"27","hashOfConfig":"26"},{"size":362,"mtime":1614703352042,"results":"28","hashOfConfig":"26"},{"size":2819,"mtime":1614706519084,"results":"29","hashOfConfig":"26"},{"size":6642,"mtime":1614703352038,"results":"30","hashOfConfig":"26"},{"size":7622,"mtime":1614703352038,"results":"31","hashOfConfig":"26"},{"size":4216,"mtime":1614703352036,"results":"32","hashOfConfig":"26"},{"size":5670,"mtime":1614703352037,"results":"33","hashOfConfig":"26"},{"size":28328,"mtime":1614706277585,"results":"34","hashOfConfig":"26"},{"size":45203,"mtime":1614958033082,"results":"35","hashOfConfig":"26"},{"size":2604,"mtime":1614703352037,"results":"36","hashOfConfig":"26"},{"size":4651,"mtime":1614703352040,"results":"37","hashOfConfig":"26"},{"size":5341,"mtime":1614703352041,"results":"38","hashOfConfig":"26"},{"size":1388,"mtime":1614703352041,"results":"39","hashOfConfig":"26"},{"size":1973,"mtime":1614703352039,"results":"40","hashOfConfig":"26"},{"size":591,"mtime":1614703352038,"results":"41","hashOfConfig":"26"},{"size":3987,"mtime":1614703352041,"results":"42","hashOfConfig":"26"},{"size":1481,"mtime":1614703352041,"results":"43","hashOfConfig":"26"},{"size":2021,"mtime":1614703352039,"results":"44","hashOfConfig":"26"},{"size":369,"mtime":1614703352040,"results":"45","hashOfConfig":"26"},{"size":3444,"mtime":1614958329298,"results":"46","hashOfConfig":"26"},{"size":711,"mtime":1614703352039,"results":"47","hashOfConfig":"26"},{"size":798,"mtime":1614958287086,"results":"48","hashOfConfig":"26"},{"size":74,"mtime":1614703352040,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"1h03hve",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"52"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"52"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"52"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"52"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"52"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"52"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"52"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"52"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"/Users/cheakimhokmao/Documents/cs313_team_one/src/index.js",[],["109","110"],"/Users/cheakimhokmao/Documents/cs313_team_one/src/App.js",[],"/Users/cheakimhokmao/Documents/cs313_team_one/src/reportWebVitals.js",[],"/Users/cheakimhokmao/Documents/cs313_team_one/src/components/Main.js",[],"/Users/cheakimhokmao/Documents/cs313_team_one/src/components/SignIn.js",["111","112"],"import '../App.css';\nimport { Container, Col, Row, Form, Button } from 'react-bootstrap';\nimport { BsFillEnvelopeFill, BsLockFill } from 'react-icons/bs';\nimport { useForm } from 'react-hook-form';\nimport { ErrorMessage } from '@hookform/error-message';\nimport { Link } from 'react-router-dom';\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom.min';\nimport UrlService from './services/UrlService'\nimport axios from \"axios\"\n\n\n\n\n\n\n\nconst SignIn = (props) => {\n    const history = useHistory();\n    const { register, handleSubmit, errors } = useForm({\n        criteriaMode: 'all',\n    });\n\n    //Handle Login\n    async function onSubmit(data) {\n        axios.post(UrlService.loginUrl(), data).then(\n            res => {\n                if (res.data.user) {\n                    localStorage.setItem('access_token', res.data.access_token);\n                    props.setUser(res.data.user);\n                    history.push('/randomizer')\n                }\n\n            }\n        ).catch(\n            err => {\n                console.log(err)\n                alert(err.response.data.message)\n            }\n        )\n    }\n\n    return (\n        <>\n            <Container id='sign-in'>\n                <Row className='justify-content-center'>\n                    <p className='form-title'>Sign In</p>\n                </Row>\n                <Row className='justify-content-center paragraph'>\n                    <p className='mb-5 form-subtitle'>Let's Get Started</p>\n                </Row>\n                <Form fluid='md' onSubmit={handleSubmit(onSubmit)}>\n                    <Row className='justify-content-center'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text' controlId='formBasicEmail'>\n                                <Form.Label className='form-label'>Email</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        autoComplete='off'\n                                        ref={register({\n                                            required: 'This is required.',\n                                            pattern: {\n                                                value: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n                                                message: 'Invalid Email Address',\n                                            },\n                                        })}\n                                        name='email'\n                                        className='from-control'\n                                        type='email'\n                                        placeholder='Enter Email'\n                                        required\n                                    />\n                                    <ErrorMessage\n                                        errors={errors}\n                                        name='email'\n                                        render={({ messages }) => {\n                                            return messages\n                                                ? Object.entries(messages).map(([type, message]) => (\n                                                    <p style={{ color: 'red' }} key={type}>\n                                                        {message}\n                                                    </p>\n                                                ))\n                                                : null;\n                                        }}\n                                    />\n                                    <BsFillEnvelopeFill className='input-icon' />\n                                </div>\n                                <Form.Text className='text-muted'></Form.Text>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className='justify-content-center'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text' controlId='formBasicPassword'>\n                                <Form.Label className='form-label'>Password</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        className='from-control'\n                                        type='password'\n                                        placeholder='Enter Password'\n                                        name='password'\n                                        ref={register({\n                                            required: 'This is required.'\n                                        })}\n                                        required\n                                    />\n                                    <BsLockFill className='input-icon'></BsLockFill>\n                                </div>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className='mb-4 mt-3'>\n                        <Col style={{ textAlign: 'center' }}>\n                            <Link\n                                to='/password/forgot'\n                                style={{\n                                    fontSize: '800',\n                                }}>\n                                Forgotten Password?\n                            </Link>\n                        </Col>\n                    </Row>\n                    <Row className='mb-4 mt-3'>\n                        <Col style={{ textAlign: 'center' }}>\n                            Don't have an account yet?\n                            <Link\n                                to='/signup'\n                                style={{\n                                    fontSize: '800',\n                                    color: '#52616b',\n                                    marginLeft: '5px',\n                                    textDecoration: 'none',\n                                }}>\n                                Sign Up\n                            </Link>\n                        </Col>\n                    </Row>\n                    <Row className='mb-4'>\n                        <Col style={{ textAlign: 'center' }}>\n                            <Button className='sign-button' variant='white' type='submit'>\n                                Sign In\n                            </Button>\n                        </Col>\n                    </Row>\n                </Form>\n            </Container>\n        </>\n    );\n};\n\nexport default SignIn;","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/SignUp.js",["113","114"],"import React, { useRef } from 'react';\n\nimport { Container, Col, Row, Form, Button } from 'react-bootstrap';\nimport { BsFillEnvelopeFill, BsLockFill } from 'react-icons/bs';\nimport { useForm } from 'react-hook-form';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport UrlService from './services/UrlService';\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom.min';\n\nconst SignUp = (props) => {\n    const { register, handleSubmit, errors, watch } = useForm({\n        criteriaMode: 'all',\n    });\n\n    const history = useHistory();\n    const onSubmit = (data) => {\n\n        axios.post(UrlService.registerUrl(), data).then(\n            res => {\n                if (res.data.user) {\n                    localStorage.setItem('access_token', res.data.access_token);\n                    props.setUser(res.data.user);\n                    history.push('/randomizer')\n                }\n\n            }\n        ).catch(\n            err => {\n                alert(err.response.data.errors.email.join(', '))\n            }\n        )\n    }\n\n    const password = useRef({});\n    password.current = watch('password', '');\n\n    return (\n        <>\n            <Container id='sign-up'>\n                <Row className='justify-content-center'>\n                    <p className='form-title'>Sign Up</p>\n                </Row>\n                <Row className='justify-content-center paragraph'>\n                    <p className='mb-5 form-subtitle'>Create Your Free Account</p>\n                </Row>\n                <Form fluid='md' onSubmit={handleSubmit(onSubmit)}>\n                    <Row className='justify-content-center'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text'>\n                                <Form.Label className='form-label'>Email</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        autoComplete='off'\n                                        ref={register({\n                                            required: 'This is required.',\n                                            pattern: {\n                                                value: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n                                                message: 'Invalid Email Address',\n                                            },\n                                        })}\n                                        name='email'\n                                        className='from-control'\n                                        type='email'\n                                        placeholder='Enter Email'\n                                        required\n                                    />\n                                    {errors.email && <p style={{ color: 'red' }}>{errors.email.message}</p>}\n\n                                    <BsFillEnvelopeFill className='input-icon' />\n                                </div>\n                                <Form.Text className='text-muted'></Form.Text>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className='justify-content-center'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text'>\n                                <Form.Label className='form-label'>Password</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        autoComplete='off'\n                                        name='password'\n                                        type='password'\n                                        ref={register({\n                                            required: 'This is required.',\n                                            minLength: {\n                                                value: 8,\n                                                message: 'Password must have at least 8 characters',\n                                            },\n                                            maxLength: {\n                                                value: 20,\n                                                message: 'Password must have less than 20 characters',\n                                            },\n                                        })}\n                                        required\n                                        placeholder='Enter password'\n                                    />\n                                    {errors.password && (\n                                        <p style={{ color: 'red' }}>{errors.password.message}</p>\n                                    )}\n                                    <BsLockFill className='input-icon'></BsLockFill>\n                                </div>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className='justify-content-center mb-3'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text'>\n                                <Form.Label className='form-label'>Confirm Password</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        autoComplete='off'\n                                        required\n                                        placeholder='Confirm Password'\n                                        name='password_confirmation'\n                                        type='password'\n                                        ref={register({\n                                            validate: (value) =>\n                                                value === password.current || 'The passwords do not match',\n                                        })}\n                                    />\n                                    {errors.password_confirmation && (\n                                        <p style={{ color: 'red' }}>{errors.password_confirmation.message}</p>\n                                    )}\n                                    <BsLockFill className='input-icon'></BsLockFill>\n                                </div>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className='mb-4'>\n                        <Col style={{ textAlign: 'center' }}>\n                            Already have an account?\n                            <Link\n                                to='/signin'\n                                style={{\n                                    color: '#52616b',\n                                    fontWeight: '600px',\n                                    marginLeft: '5px',\n                                    textDecoration: 'none',\n                                }}>\n                                Sign In\n                            </Link>\n                        </Col>\n                    </Row>\n                    <Row className='mb-4'>\n                        <Col style={{ textAlign: 'center' }}>\n                            <Button className='sign-button' variant='white' type='submit'>\n                                Sign Up\n                            </Button>\n                        </Col>\n                    </Row>\n                </Form>\n            </Container>\n        </>\n    );\n};\n\nexport default SignUp;","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/ConfirmEmail.js",["115","116","117"],"import React from 'react';\nimport './Authentication.css';\nimport { Container, Col, Row, Form, Button } from 'react-bootstrap';\nimport { BsFillEnvelopeFill } from 'react-icons/bs';\nimport { useForm } from 'react-hook-form';\nimport { ErrorMessage } from '@hookform/error-message';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport UrlService from './services/UrlService';\n\nconst ConfirmEmail = () => {\n    const { register, handleSubmit, errors } = useForm({\n        criteriaMode: 'all',\n    });\n\n    const onSubmit = (data) => {\n        axios.post(UrlService.forgotUrl(), data).then((res) => {\n            console.log(res);\n            alert(res.data.message)\n        }).catch((err) => {\n            alert(err.response.data.message)\n        });\n    };\n\n    return (\n        <>\n            <Container id='confirm-email'>\n                <Row className='justify-content-center'>\n                    <p className='form-title'>Reset Password</p>\n                </Row>\n                <Row className='justify-content-center paragraph'>\n                    <p className='mb-5 form-subtitle'>Please enter your email</p>\n                </Row>\n                <Form fluid='md' onSubmit={handleSubmit(onSubmit)}>\n                    <Row className='justify-content-center'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text' controlId='formBasicEmail'>\n                                <Form.Label className='form-label'>Email</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        autoComplete='off'\n                                        ref={register({\n                                            required: 'This is required.',\n                                            pattern: {\n                                                value: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n                                                message: 'Invalid Email Address',\n                                            },\n                                        })}\n                                        name='email'\n                                        className='from-control'\n                                        type='email'\n                                        placeholder='Enter Email'\n                                        required\n                                    />\n                                    <ErrorMessage\n                                        errors={errors}\n                                        name='email'\n                                        render={({ messages }) => {\n                                            return messages\n                                                ? Object.entries(messages).map(\n                                                    ([type, message]) => (\n                                                        <p style={{ color: 'red' }} key={type}>\n                                                            {message}\n                                                        </p>\n                                                    )\n                                                )\n                                                : null;\n                                        }}\n                                    />\n                                    <BsFillEnvelopeFill className='input-icon' />\n                                </div>\n                                <Form.Text className='text-muted'></Form.Text>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <br></br>\n                    <br></br>\n                    <Row className='mb-4'>\n                        <Col style={{ textAlign: 'center' }}>\n                            <Button className='confirm-email-button' variant='white' type='submit'>\n                                Send Password Reset Link\n                            </Button>\n                        </Col>\n                    </Row>\n                </Form>\n            </Container>\n        </>\n    );\n};\n\nexport default ConfirmEmail;\n","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/ConfirmPassword.js",["118","119","120"],"import React, { useRef, useState } from 'react';\nimport './Authentication.css';\nimport { Container, Col, Row, Form, Button } from 'react-bootstrap';\nimport { BsFillEnvelopeFill, BsLockFill } from 'react-icons/bs';\nimport { useForm } from 'react-hook-form';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport UrlService from './services/UrlService';\n\nconst ConfirmPassword = (props) => {\n    const { register, handleSubmit, errors, watch } = useForm({\n        criteriaMode: 'all',\n        defaultValues: {\n            token: props.match.params.token,\n        }\n    });\n\n    // Handle Reset Password\n    const onSubmit = (data) => {\n        axios.post(UrlService.resetPasswordUrl(), data).then((res) => {\n            alert(res.data.message)\n        }).catch((err) => {\n            alert(err.response.data.message)\n        });\n    };\n\n\n    const password = useRef({});\n    password.current = watch('password', '');\n\n    return (\n        <>\n            <Container id='confirm-password'>\n                <Row className='justify-content-center'>\n                    <p className='form-title'>Reset Password</p>\n                </Row>\n                <Row className='justify-content-center paragraph'>\n                    <p className='mb-5 form-subtitle'>Please enter your new password</p>\n                </Row>\n                <Form fluid='md' onSubmit={handleSubmit(onSubmit)}>\n\n                    <Row className='justify-content-center'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text'>\n                                <Form.Label className='form-label'>New Password</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        autoComplete='off'\n                                        name='token'\n                                        type='hidden'\n                                        ref={register}\n                                    />\n                                    <Form.Control\n                                        autoComplete='off'\n                                        name='password'\n                                        type='password'\n                                        ref={register({\n                                            required: 'This is required.',\n                                            minLength: {\n                                                value: 8,\n                                                message: 'Password must have at least 8 characters',\n                                            },\n                                            maxLength: {\n                                                value: 20,\n                                                message:\n                                                    'Password must have less than 20 characters',\n                                            },\n                                        })}\n                                        required\n                                        placeholder='Enter password'\n                                    />\n                                    {errors.password && (\n                                        <p style={{ color: 'red' }}>{errors.password.message}</p>\n                                    )}\n                                    <BsLockFill className='input-icon'></BsLockFill>\n                                </div>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className='justify-content-center mb-3'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text'>\n                                <Form.Label className='form-label'>Confirm Password</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        autoComplete='off'\n                                        required\n                                        placeholder='Confirm Password'\n                                        name='password_confirmation'\n                                        type='password'\n                                        ref={register({\n                                            validate: (value) =>\n                                                value === password.current ||\n                                                'The passwords do not match',\n                                        })}\n                                    />\n                                    {errors.password_repeat && (\n                                        <p style={{ color: 'red' }}>\n                                            {errors.password_repeat.message}\n                                        </p>\n                                    )}\n                                    <BsLockFill className='input-icon'></BsLockFill>\n                                </div>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <br></br>\n                    <Row className='mb-4'>\n                        <Col style={{ textAlign: 'center' }}>\n                            <Button className='confirm-password-button' variant='white' type='submit'>\n                                Reset Password\n                            </Button>\n                        </Col>\n                    </Row>\n                </Form>\n            </Container>\n        </>\n    );\n};\n\nexport default ConfirmPassword;\n","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/UnitConverter.js",[],"/Users/cheakimhokmao/Documents/cs313_team_one/src/components/ScientificCalculator.js",["121"],"import React, { Component } from 'react';\nimport './ScientificCalculator.css';\nimport PointTarget from 'react-point';\n\nclass AutoScalingText extends Component {\n    state = {\n        scale: 1,\n    };\n\n    componentDidUpdate() {\n        const { scale } = this.state;\n        const node = this.node;\n        const parentNode = node.parentNode;\n        const availableWidth = parentNode.offsetWidth;\n        const actualWidth = node.offsetWidth;\n        const actualScale = availableWidth / actualWidth;\n\n        if (scale === actualScale) return;\n\n        if (actualScale < 1) {\n            this.setState({ scale: actualScale });\n        } else if (scale < 1) {\n            this.setState({ scale: 1 });\n        }\n    }\n\n    render() {\n        const { scale } = this.state;\n\n        return (\n            <div\n                className='auto-scaling-text'\n                style={{ transform: `scale(${scale},${scale})` }}\n                ref={(node) => (this.node = node)}\n            >\n                {this.props.children}\n            </div>\n        );\n    }\n}\n\nclass CalculatorDisplay extends Component {\n    render() {\n        const { value, ...props } = this.props;\n        const language = navigator.language || 'en-US';\n        const escapedKeys = [' e ', 'E', '*', '(', ')', 'r', 'o'];\n        let isNumeric = true;\n\n        escapedKeys.forEach((key) => {\n            if (value.includes(key)) isNumeric = false;\n        });\n\n        const parsedValue = isNumeric ? parseFloat(value) : value;\n\n        let formattedValue = parsedValue.toLocaleString(language, {\n            useGrouping: true,\n            maximumFractionDigits: 10,\n        });\n\n        const match = value.match(/\\.\\d*?(0*)$/);\n\n        if (match) formattedValue += /[1-9]/.test(match[0]) ? match[1] : match[0];\n\n        return (\n            <div {...props}>\n                <AutoScalingText>{formattedValue}</AutoScalingText>\n            </div>\n        );\n    }\n}\n\nclass CalculatorKey extends Component {\n    render() {\n        const { onPress, className, ...props } = this.props;\n\n        return (\n            <PointTarget onPoint={onPress}>\n                <button className={`calculator-key ${className}`} {...props} />\n            </PointTarget>\n        );\n    }\n}\n\nconst CalculatorOperations = {\n    '/': (prevValue, nextValue) => (nextValue === 0 ? 'error' : prevValue / nextValue),\n    '*': (prevValue, nextValue) => prevValue * nextValue,\n    '+': (prevValue, nextValue) => prevValue + nextValue,\n    '-': (prevValue, nextValue) => prevValue - nextValue,\n    '=': (prevValue, nextValue) => nextValue,\n    nthRoot: (prevValue, nextValue) => Math.pow(nextValue, 1 / prevValue),\n    xPowY: (prevValue, nextValue) => Math.pow(prevValue, nextValue),\n    yPowX: (prevValue, nextValue) => Math.pow(nextValue, prevValue),\n    logY: (prevValue, nextValue) => Math.log(nextValue) / Math.log(prevValue),\n};\n\nclass ScientificCalculator extends Component {\n    state = {\n        value: null,\n        displayValue: '0',\n        operator: null,\n        waitingForOperand: false,\n        isDot: false,\n        done: false,\n        shift: false,\n        degree: false,\n        ee: false,\n        isMemoryActive: false,\n        isBracketsActive: false,\n        isLeftBracket: false,\n        isRightBracket: false,\n        isDigit: false,\n        isOperator: false,\n        countBracket: 0,\n        checkLeftBracket: false,\n        memory: {\n            memory_plus: 0,\n            memory_minus: 0,\n            memory_recall: null,\n        },\n    };\n\n    degreeClick = () => {\n        this.setState((state) => {\n            return {\n                degree: !state.degree,\n            };\n        });\n    };\n\n    shiftClick = () => {\n        this.setState((state) => {\n            return {\n                shift: !state.shift,\n            };\n        });\n    };\n\n    clearAll() {\n        this.setState({\n            value: null,\n            displayValue: '0',\n            operator: null,\n            waitingForOperand: false,\n            isDot: false,\n            done: false,\n            ee: false,\n            isMemoryActive: false,\n            isBracketsActive: false,\n            isRightBracket: false,\n            isLeftBracket: false,\n            isDigit: false,\n            isOperator: false,\n            countBracket: 0,\n            checkLeftBracket: false,\n        });\n    }\n\n    clearDisplay() {\n        this.setState({\n            displayValue: '0',\n        });\n    }\n\n    clearLastChar() {\n        const { displayValue } = this.state;\n\n        this.setState({\n            displayValue: displayValue.substring(0, displayValue.length - 1) || '0',\n        });\n    }\n\n    toggleSign() {\n        const { displayValue } = this.state;\n        const newValue = parseFloat(displayValue) * -1;\n\n        this.setState({\n            displayValue: String(newValue),\n        });\n    }\n\n    inputPercent() {\n        const { displayValue } = this.state;\n        const currentValue = parseFloat(displayValue);\n\n        if (currentValue === 0) return;\n\n        const fixedDigits = displayValue.replace(/^-?\\d*\\.?/, '');\n        const newValue = parseFloat(displayValue) / 100;\n\n        this.setState({\n            displayValue: String(newValue.toFixed(fixedDigits.length + 2)),\n            done: true,\n        });\n    }\n\n    inputDot() {\n        const {\n            displayValue,\n            waitingForOperand,\n            isDot,\n            isMemoryActive,\n            isBracketsActive,\n            countBracket,\n            isOperator,\n        } = this.state;\n\n        if (waitingForOperand === true) {\n            if (isBracketsActive === true && countBracket === 0) {\n                this.setState({\n                    displayValue: displayValue + '*0.',\n                    waitingForOperand: false,\n                });\n            } else if (isBracketsActive === true && isOperator === true) {\n                this.setState({\n                    displayValue: displayValue + '0.',\n                    waitingForOperand: false,\n                });\n            } else {\n                this.setState({ displayValue: '0.', waitingForOperand: false });\n            }\n        } else if (isDot === true) {\n            this.setState({\n                displayValue: displayValue + '.',\n                waitingForOperand: false,\n                isDot: true,\n            });\n        } else if (isMemoryActive === true) {\n            this.setState({\n                displayValue: '0.',\n                waitingForOperand: false,\n                isDot: true,\n            });\n        } else if (!/\\./.test(displayValue)) {\n            this.setState({\n                displayValue: displayValue + '.',\n                waitingForOperand: false,\n                isDot: true,\n            });\n        }\n    }\n\n    inputDigit(digit) {\n        const { displayValue, waitingForOperand, isDot, done } = this.state;\n\n        if (waitingForOperand) {\n            this.setState({\n                displayValue: String(digit),\n                waitingForOperand: false,\n                isDigit: true,\n            });\n        } else {\n            const hasDot = displayValue.includes('.');\n            const integer = displayValue.split('.')[0];\n\n            if (!hasDot && integer.length >= 10) return;\n\n            if (done === true) {\n                this.clearAll();\n                this.setState({\n                    displayValue: String(digit),\n                    isDigit: true,\n                    isOperator: false,\n                });\n            } else if (isDot === true) {\n                this.setState({ displayValue: displayValue + digit });\n            } else {\n                this.setState({\n                    displayValue: displayValue === '0' ? String(digit) : displayValue + digit,\n                    isDigit: true,\n                    isOperator: true,\n                    checkLeftBracket: false,\n                });\n            }\n        }\n    }\n\n    performOperation(nextOperator) {\n        const {\n            value,\n            displayValue,\n            operator,\n            waitingForOperand,\n            isMemoryActive,\n            isBracketsActive,\n            isDigit,\n            isOperator,\n            ee,\n            countBracket,\n        } = this.state;\n\n        if (nextOperator === '=' && countBracket !== 0) {\n            return this.setState({\n                displayValue: 'error',\n                isBracketsActive: false,\n                done: true,\n            });\n        }\n\n        if (isOperator === false) {\n            return this.setState({ displayValue });\n        }\n\n        if (isBracketsActive === true && nextOperator === '=') {\n            return this.setState({\n                displayValue: String(eval(displayValue)),\n                isBracketsActive: false,\n                done: true,\n            });\n        } else if (isBracketsActive === true) {\n            if (isDigit) {\n                this.setState({\n                    displayValue: displayValue + nextOperator,\n                    isOperator: false,\n                    isDigit: false,\n                    checkLeftBracket: false,\n                });\n            }\n        } else {\n            const inputValue = parseFloat(displayValue);\n\n            if (ee === true) {\n                const currentValue = displayValue.replace(/\\s/g, '');\n                return this.setState({\n                    displayValue: parseFloat(currentValue).toPrecision(),\n                    done: true,\n                    ee: false,\n                });\n            }\n\n            if (value == null) {\n                this.setState({\n                    value: inputValue,\n                });\n            } else if (\n                (operator && waitingForOperand === false) ||\n                (operator && isMemoryActive === true)\n            ) {\n                const currentValue = parseFloat(value) || 0;\n                const newValue = CalculatorOperations[operator](currentValue, inputValue);\n\n                this.setState({\n                    value: newValue,\n                    displayValue: String(newValue),\n                });\n            }\n\n            this.setState({\n                waitingForOperand: true,\n                operator: nextOperator,\n            });\n        }\n    }\n\n    keyDown = (event) => {\n        let { key } = event;\n\n        if (key === 'Enter') key = '=';\n\n        if (/\\d/.test(key)) {\n            event.preventDefault();\n            this.inputDigit(parseInt(key, 10));\n        } else if (key in CalculatorOperations) {\n            event.preventDefault();\n            this.performOperation(key);\n        } else if (key === '.') {\n            event.preventDefault();\n            this.inputDot();\n        } else if (key === '%') {\n            event.preventDefault();\n            this.inputPercent();\n        } else if (key === 'Backspace') {\n            event.preventDefault();\n            this.clearLastChar();\n        } else if (key === 'Clear') {\n            event.preventDefault();\n\n            if (this.state.displayValue !== '0') {\n                this.clearDisplay();\n            } else {\n                this.clearAll();\n            }\n        }\n    };\n\n    memoryClear() {\n        this.setState((prevState) => ({\n            memory: {\n                ...prevState.memory,\n                memory_plus: 0,\n                memory_minus: 0,\n                memory_recall: null,\n            },\n            isMemoryActive: false,\n        }));\n    }\n\n    memoryPlus() {\n        let temp = parseFloat(this.state.displayValue) + this.state.memory.memory_plus;\n        this.setState((prevState) => ({\n            memory: {\n                ...prevState.memory,\n                memory_plus: temp,\n            },\n            isMemoryActive: true,\n        }));\n    }\n\n    memoryMinus() {\n        let temp = parseInt(this.state.displayValue) + this.state.memory.memory_minus;\n        this.setState((prevState) => ({\n            memory: {\n                ...prevState.memory,\n                memory_minus: temp,\n            },\n            isMemoryActive: true,\n        }));\n    }\n\n    memoryRecall() {\n        const { isMemoryActive } = this.state;\n\n        let temp = (this.state.memory.memory_plus - this.state.memory.memory_minus).toString();\n\n        if (isMemoryActive) {\n            this.setState({\n                displayValue: temp,\n                isMemoryActive: true,\n            });\n        } else {\n            this.setState({\n                displayValue: temp,\n                isMemoryActive: false,\n            });\n        }\n    }\n\n    power2() {\n        const { displayValue } = this.state;\n        this.setState({ displayValue: String(Math.pow(parseFloat(displayValue), 2)), done: true });\n    }\n\n    power3() {\n        const { displayValue } = this.state;\n        this.setState({ displayValue: String(Math.pow(parseFloat(displayValue), 3)), done: true });\n    }\n\n    tenPowerX() {\n        const { displayValue } = this.state;\n        this.setState({ displayValue: String(Math.pow(10, parseFloat(displayValue))), done: true });\n    }\n\n    twoPowerX() {\n        const { displayValue } = this.state;\n        this.setState({ displayValue: String(Math.pow(2, parseFloat(displayValue))), done: true });\n    }\n\n    rand() {\n        this.setState({ displayValue: String(Math.random()) });\n    }\n\n    sin() {\n        const { displayValue, degree } = this.state;\n\n        if (degree === false) {\n            this.setState({ displayValue: String(Math.sin(displayValue)), done: true });\n        } else {\n            const result = String(Math.sin((parseFloat(displayValue) * Math.PI) / 180));\n            this.setState({ displayValue: result, done: true });\n        }\n    }\n\n    cos() {\n        const { displayValue, degree } = this.state;\n\n        if (degree === false) {\n            this.setState({ displayValue: String(Math.cos(displayValue)), done: true });\n        } else {\n            const result = String(Math.cos((parseInt(displayValue) * Math.PI) / 180));\n            this.setState({ displayValue: result, done: true });\n        }\n    }\n\n    tan() {\n        const { displayValue, degree } = this.state;\n\n        if (degree === false) {\n            this.setState({ displayValue: String(Math.tan(displayValue)), done: true });\n        } else {\n            if (displayValue === '90' || displayValue === '270') {\n                this.setState({ displayValue: 'Not a number' });\n            } else {\n                const result = String(Math.tan((parseFloat(displayValue) * Math.PI) / 180));\n                this.setState({ displayValue: result, done: true });\n            }\n        }\n    }\n\n    sinh() {\n        const { displayValue } = this.state;\n        const result = String(Math.sinh(parseFloat(displayValue)));\n        this.setState({ displayValue: result, done: true });\n    }\n\n    cosh() {\n        const { displayValue } = this.state;\n        const result = String(Math.cosh(parseFloat(displayValue)));\n        this.setState({ displayValue: result, done: true });\n    }\n\n    tanh() {\n        const { displayValue } = this.state;\n        const result = String(Math.tanh(parseFloat(displayValue)));\n        this.setState({ displayValue: result, done: true });\n    }\n\n    sinInverse() {\n        const { displayValue, degree } = this.state;\n\n        if (degree === false) {\n            this.setState({ displayValue: String(Math.asin(displayValue)), done: true });\n        } else {\n            const result = String((Math.asin(parseFloat(displayValue)) * 180) / Math.PI);\n            this.setState({ displayValue: result, done: true });\n        }\n    }\n\n    cosInverse() {\n        const { displayValue, degree } = this.state;\n\n        if (degree === false) {\n            this.setState({ displayValue: String(Math.acos(displayValue)), done: true });\n        } else {\n            const result = String((Math.acos(parseFloat(displayValue)) * 180) / Math.PI);\n            this.setState({ displayValue: result, done: true });\n        }\n    }\n\n    tanInverse() {\n        const { displayValue, degree } = this.state;\n\n        if (degree === false) {\n            this.setState({ displayValue: String(Math.atan(displayValue)), done: true });\n        } else {\n            const result = String((Math.atan(parseFloat(displayValue)) * 180) / Math.PI);\n            this.setState({ displayValue: result, done: true });\n        }\n    }\n\n    sinhInverse() {\n        const { displayValue } = this.state;\n        const result = String(Math.asinh(parseFloat(displayValue)));\n        this.setState({ displayValue: result, done: true });\n    }\n\n    coshInverse() {\n        const { displayValue } = this.state;\n        const result = String(Math.acosh(parseFloat(displayValue)));\n        this.setState({ displayValue: result, done: true });\n    }\n\n    tanhInverse() {\n        const { displayValue } = this.state;\n        const result = String(Math.atanh(parseFloat(displayValue)));\n        this.setState({ displayValue: result, done: true });\n    }\n\n    squareRoot() {\n        const { displayValue } = this.state;\n        this.setState({ displayValue: String(Math.sqrt(parseFloat(displayValue))), done: true });\n    }\n\n    cubeRoot() {\n        const { displayValue } = this.state;\n        this.setState({ displayValue: String(Math.cbrt(parseFloat(displayValue))), done: true });\n    }\n\n    factorial() {\n        const { displayValue } = this.state;\n\n        if (displayValue.indexOf('.') !== -1) {\n            return this.setState({ displayValue: 'NaN' });\n        }\n\n        if (displayValue === '1' || displayValue === '-1') {\n            return this.setState({ displayValue });\n        } else if (parseInt(displayValue) > 1) {\n            var result = 1;\n\n            for (var i = 1; i <= parseInt(displayValue); ++i) {\n                result *= i;\n            }\n\n            return this.setState({ displayValue: String(result), done: true });\n        } else if (parseInt(displayValue) < -1) {\n            var resultNegative = 1;\n\n            for (var j = -1; j >= parseInt(displayValue); j--) {\n                resultNegative *= j;\n            }\n\n            return this.setState({ displayValue: String(resultNegative), done: true });\n        }\n    }\n\n    log10() {\n        const { displayValue } = this.state;\n\n        if (parseInt(displayValue) <= 0) {\n            return this.setState({ displayValue: 'Not a Number' });\n        }\n\n        this.setState({ displayValue: String(Math.log10(parseFloat(displayValue))), done: true });\n    }\n\n    log2() {\n        const { displayValue } = this.state;\n\n        if (parseInt(displayValue) <= 0) {\n            return this.setState({ displayValue: 'Not a Number' });\n        }\n\n        this.setState({ displayValue: String(Math.log2(parseFloat(displayValue))), done: true });\n    }\n\n    log() {\n        const { displayValue } = this.state;\n\n        if (parseInt(displayValue) <= 0) {\n            return this.setState({ displayValue: 'Not a Number' });\n        }\n\n        this.setState({ displayValue: String(Math.log(parseFloat(displayValue))), done: true });\n    }\n\n    multiplicativeInverse() {\n        const { displayValue } = this.state;\n\n        if (displayValue === '0') {\n            return this.setState({ displayValue: 'error', done: true });\n        }\n\n        const result = String(1 / displayValue);\n        this.setState({ displayValue: result, done: true });\n    }\n\n    exponential() {\n        const { displayValue } = this.state;\n\n        if (displayValue === '0') {\n            return this.setState({ displayValue: '1' });\n        }\n\n        const result = String(Math.exp(parseFloat(displayValue)));\n        this.setState({ displayValue: result, done: true });\n    }\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.keyDown);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.keyDown);\n    }\n\n    ee() {\n        const { displayValue, done, ee } = this.state;\n\n        if (done === false) {\n            if (ee === true) {\n                this.setState({ displayValue });\n            } else {\n                this.setState({ displayValue: displayValue + ' e ', ee: true });\n            }\n        }\n    }\n\n    leftBracket() {\n        const { displayValue, isOperator, countBracket, checkLeftBracket } = this.state;\n\n        if (displayValue === '0') {\n            this.setState({\n                displayValue: '(',\n                isBracketsActive: true,\n                isLeftBracket: true,\n                isOperator: true,\n                countBracket: countBracket + 1,\n                checkLeftBracket: true,\n            });\n        } else if (isOperator === false || checkLeftBracket === true) {\n            this.setState({\n                displayValue: displayValue + '(',\n                isBracketsActive: true,\n                isLeftBracket: true,\n                isOperator: true,\n                countBracket: countBracket + 1,\n                checkLeftBracket: true,\n            });\n        } else {\n            this.setState({\n                displayValue: displayValue + '*(',\n                isBracketsActive: true,\n                isLeftBracket: true,\n                isOperator: true,\n                countBracket: countBracket + 1,\n                checkLeftBracket: true,\n            });\n        }\n    }\n\n    rightBracket() {\n        const { displayValue, isLeftBracket, isDigit, countBracket } = this.state;\n\n        if (isLeftBracket && isDigit) {\n            this.setState({\n                displayValue: displayValue + ')',\n                countBracket: countBracket - 1,\n            });\n        }\n    }\n\n    render() {\n        const { displayValue } = this.state;\n        const clearDisplay = displayValue !== '0';\n        const clearText = clearDisplay ? 'C' : 'AC';\n\n        return (\n            <div id='scientific-calculator'>\n                <div className='calculator-body'>\n                    <div class='resultContainer'>\n                        <div class='result'>\n                            <p>\n                                <CalculatorDisplay value={displayValue} />\n                            </p>\n                        </div>\n                    </div>\n                    <div className='button'>\n                        <div className='test'>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.leftBracket()}\n                            >\n                                (\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.rightBracket()}\n                            >\n                                )\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.memoryClear()}\n                            >\n                                mc\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.memoryPlus()}\n                            >\n                                m+\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.memoryMinus()}\n                            >\n                                m-\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.memoryRecall()}\n                            >\n                                mr\n                            </CalculatorKey>\n                            <CalculatorKey\n                                className='clear'\n                                style={{ backgroundColor: '#BB4444', color: '#F0F5F9' }}\n                                onPress={() =>\n                                    clearDisplay ? this.clearDisplay() : this.clearAll()\n                                }\n                            >\n                                {clearText}\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.toggleSign()}\n                            >\n                                -/+\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputPercent()}\n                            >\n                                %\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.performOperation('/')}\n                            >\n                                ÷\n                            </CalculatorKey>\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={this.shiftClick}\n                                >\n                                    2\n                                    <sup>\n                                        <small>nd</small>\n                                    </sup>\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={this.shiftClick}\n                                >\n                                    1\n                                    <sup>\n                                        <small>st</small>\n                                    </sup>\n                                </CalculatorKey>\n                            )}\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.power2()}\n                            >\n                                x\n                                <sup>\n                                    <small>2</small>\n                                </sup>\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.power3()}\n                            >\n                                x\n                                <sup>\n                                    <small>3</small>\n                                </sup>\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.performOperation('xPowY')}\n                            >\n                                x\n                                <sup>\n                                    <small>y</small>\n                                </sup>\n                            </CalculatorKey>\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.exponential()}\n                                >\n                                    e\n                                    <sup>\n                                        <small>x</small>\n                                    </sup>\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.performOperation('yPowX')}\n                                >\n                                    y\n                                    <sup>\n                                        <small>x</small>\n                                    </sup>\n                                </CalculatorKey>\n                            )}\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.tenPowerX()}\n                                >\n                                    10\n                                    <sup>\n                                        <small>x</small>\n                                    </sup>\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.twoPowerX()}\n                                >\n                                    2\n                                    <sup>\n                                        <small>x</small>\n                                    </sup>\n                                </CalculatorKey>\n                            )}\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(7)}\n                            >\n                                7\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(8)}\n                            >\n                                8\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(9)}\n                            >\n                                9\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.performOperation('*')}\n                            >\n                                ×\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.multiplicativeInverse()}\n                            >\n                                1/x\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.squareRoot()}\n                            >\n                                <sup>\n                                    <small>2</small>\n                                </sup>\n                                √\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.cubeRoot()}\n                            >\n                                <sup>\n                                    <small>3</small>\n                                </sup>\n                                √\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.performOperation('nthRoot')}\n                            >\n                                <sup>\n                                    <small>x</small>\n                                </sup>\n                                √\n                            </CalculatorKey>\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.log()}\n                                >\n                                    ln\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.performOperation('logY')}\n                                >\n                                    log\n                                    <sub>\n                                        <small>y</small>\n                                    </sub>\n                                </CalculatorKey>\n                            )}\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.log10()}\n                                >\n                                    log\n                                    <sub>\n                                        <small>10</small>\n                                    </sub>\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.log2()}\n                                >\n                                    log\n                                    <sub>\n                                        <small>2</small>\n                                    </sub>\n                                </CalculatorKey>\n                            )}\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(4)}\n                            >\n                                4\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(5)}\n                            >\n                                5\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(6)}\n                            >\n                                6\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.performOperation('-')}\n                            >\n                                −\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.factorial()}\n                            >\n                                x!\n                            </CalculatorKey>\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.sin()}\n                                >\n                                    sin\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.sinInverse()}\n                                >\n                                    sin\n                                    <sup>\n                                        <small>-1</small>\n                                    </sup>\n                                </CalculatorKey>\n                            )}\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.cos()}\n                                >\n                                    cos\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.cosInverse()}\n                                >\n                                    cos\n                                    <sup>\n                                        <small>-1</small>\n                                    </sup>\n                                </CalculatorKey>\n                            )}\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.tan()}\n                                >\n                                    tan\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.tanhInverse()}\n                                >\n                                    tan\n                                    <sup>\n                                        <small>-1</small>\n                                    </sup>\n                                </CalculatorKey>\n                            )}\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(Math.exp(1))}\n                            >\n                                e\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.ee()}\n                            >\n                                EE\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(1)}\n                            >\n                                1\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(2)}\n                            >\n                                2\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(3)}\n                            >\n                                3\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.performOperation('+')}\n                            >\n                                +\n                            </CalculatorKey>\n                            {!this.state.degree ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={this.degreeClick}\n                                >\n                                    Rad\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={this.degreeClick}\n                                >\n                                    Deg\n                                </CalculatorKey>\n                            )}\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.sinh()}\n                                >\n                                    sinh\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.sinhInverse()}\n                                >\n                                    sinh\n                                    <sup>\n                                        <small>-1</small>\n                                    </sup>\n                                </CalculatorKey>\n                            )}\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.cosh()}\n                                >\n                                    cosh\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.coshInverse()}\n                                >\n                                    cosh\n                                    <sup>\n                                        <small>-1</small>\n                                    </sup>\n                                </CalculatorKey>\n                            )}\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.tanh()}\n                                >\n                                    tanh\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.tanhInverse()}\n                                >\n                                    tanh\n                                    <sup>\n                                        <small>-1</small>\n                                    </sup>\n                                </CalculatorKey>\n                            )}\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(Math.PI)}\n                            >\n                                π\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.rand()}\n                            >\n                                Rand\n                            </CalculatorKey>\n                            <CalculatorKey\n                                className='zero'\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(0)}\n                            >\n                                0\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDot()}\n                            >\n                                .\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#c9d6df', color: '#52616b' }}\n                                onPress={() => this.performOperation('=')}\n                            >\n                                =\n                            </CalculatorKey>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ScientificCalculator;\n","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/Header.js",["122"],"import React, { useState } from 'react';\nimport * as FaIcons from 'react-icons/fa';\nimport * as AiIcons from 'react-icons/ai';\nimport { Link } from 'react-router-dom';\nimport { SideMenu } from '../components/SideMenu.js';\nimport './Authentication.css';\nimport { IconContext } from 'react-icons';\nimport Avatar from '@material-ui/core/Avatar';\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom.min';\n\nfunction Header(props) {\n    const [sideMenu, setSideMenu] = useState(false);\n    const history = useHistory();\n    const showSideMenu = () => setSideMenu(!sideMenu);\n\n    const handleLogout = () => {\n        localStorage.clear();\n        props.setUser(null);\n        history.push('/signIn');\n    };\n    let shows;\n    if (props.user) {\n        shows = (\n            <div className='login-logout'>\n                <Link onClick={handleLogout} className='login'>\n                    Log out\n                </Link>\n            </div>\n        );\n    } else {\n        shows = (\n            <div className='login-logout'>\n                <Link to='/SignIn' className='login'>\n                    Log In\n                </Link>\n            </div>\n        );\n    }\n    return (\n        <div id='header'>\n            <IconContext.Provider value={{ color: '#52616b' }}>\n                <div className='navbar'>\n                    <Link to='#' className='menu-bars'>\n                        <FaIcons.FaBars onClick={showSideMenu} />\n                    </Link>\n                    <span class='navbar-brand h1'>CAL SMEi-TMEi</span>\n                    {shows}\n                </div>\n\n                <nav className={sideMenu ? 'nav-menu active' : 'nav-menu'}>\n                    <ul className='nav-menu-items' onClick={showSideMenu}>\n                        <li className='navbar-toggle'>\n                            <Link to='#' className='menu-close'>\n                                <AiIcons.AiOutlineClose />\n                            </Link>\n                        </li>\n                        {SideMenu.map((item, index) => {\n                            return (\n                                <li key={index} className={item.cName}>\n                                    <Link to={item.path}>\n                                        {item.icon}\n                                        <span>{item.title}</span>\n                                    </Link>\n                                </li>\n                            );\n                        })}\n                    </ul>\n                </nav>\n            </IconContext.Provider>\n        </div>\n    );\n}\n\nexport default Header;\n","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/randomizer/App.js",["123","124","125"],"import react, { Component } from 'react';\nimport Nav from './Nav';\nimport Body from './Body';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport Button from '@material-ui/core/Button';\nimport './App.css';\nimport axios from 'axios';\nimport UrlService from '../services/UrlService';\nimport { Redirect } from 'react-router';\nimport SaveIcon from '@material-ui/icons/Save';\n\nexport default class randomizer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: [],\n            result: [],\n            activeRandomizer: 1,\n            qty: 0,\n            tGenerator: false,\n            customList: false,\n        };\n        this.handleSelectConverter = this.handleSelectConverter.bind(this);\n    }\n\n    handleSelectConverter(con) {\n        this.setState({\n            activeRandomizer: this.handleType(con),\n        });\n    }\n\n    setResult(result) {\n        this.setState({\n            result: result,\n        });\n    }\n\n    handleGetQty = (qty) => {\n        this.setState({\n            qty: qty,\n        });\n    };\n\n    handleGetData = (items) => {\n        this.setState({\n            items,\n        });\n        axios\n            .post(UrlService.handleRandomizer(), {\n                type: this.state.activeRandomizer,\n                data: { items, qty: this.state.qty },\n            })\n            .then((res) => {\n                console.log(res);\n                this.setResult(res.data.result);\n                console.log(this.state.result);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    };\n\n    handleSave = () => {\n        let data = {};\n        if (this.state.tGenerator) {\n            data = {\n                type: this.state.activeRandomizer,\n                data: {\n                    items: this.state.items,\n                    qty: this.state.activeRandomizer,\n                    result: this.state.result,\n                },\n            };\n        } else {\n            data = {\n                type: this.state.activeRandomizer,\n                data: { items: this.state.items, result: this.state.result },\n            };\n        }\n        console.log(data);\n\n        axios\n            .post(UrlService.SaveRandomizer(), data)\n            .then((res) => {\n                alert(res.data.message);\n            })\n            .catch((err) => {\n                alert(err.response.data.message);\n            });\n    };\n\n    handleType = (data) => {\n        let type = null;\n        this.setState({ tGenerator: false, customList: false, result: [], items: [] });\n        switch (data) {\n            case 'Random Picker':\n                type = 1;\n                break;\n            case 'Custom List':\n                type = 2;\n                this.setState({\n                    customList: true,\n                });\n                break;\n            case 'Decision Maker':\n                type = 3;\n                break;\n            case 'Name Picker':\n                type = 4;\n                break;\n            case 'Team Generator':\n                type = 5;\n                this.setState({\n                    tGenerator: true,\n                });\n                break;\n            case 'Yes or No':\n                type = 6;\n                break;\n            default:\n                break;\n        }\n        return type;\n    };\n\n    render() {\n        if (!this.props.user) {\n            return <Redirect to='/SignIn' />;\n        }\n        return (\n            <div className=\"randomizer-dev\">\n                <Row className='justify-content-end m-2'>\n                    <Button\n                        variant='contained'\n                        size='meddium'\n                        onClick={this.handleSave}\n                        startIcon={<SaveIcon />}\n                        style={{ margin: '20px 5px', outline: 'none' }}\n                    >\n                        Save\n                    </Button>\n                </Row>\n                <div className='randomizer'>\n                    <Row>\n                        <Nav onSelectRandomizer={this.handleSelectConverter} />\n                        <Body\n                            onGetData={this.handleGetData}\n                            teamGenerator={this.state.tGenerator}\n                            customListItem={this.state.customList}\n                            getResult={this.state.result}\n                            onGetQty={this.handleGetQty}\n                            getType={this.state.activeRandomizer}\n                        />\n                    </Row>\n                </div>\n            </div>\n        );\n    }\n}\n","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/randomizer/InformationRandomizer.js",["126"],"import React, { useEffect } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport UrlService from '../services/UrlService';\nimport Table from '@material-ui/core/Table';\nimport { Link } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport ImportExportIcon from '@material-ui/icons/ImportExport';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport axios from 'axios';\n\nexport default function InteractiveList() {\n    const [data, setData] = React.useState([]);\n\n    useEffect(() => {\n        axios\n            .get(UrlService.SaveRandomizerList())\n            .then((res) => {\n                setData(res.data);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    }, []);\n\n    const handleExport = () => {\n\n        axios\n            .get(UrlService.ExportUrl(), {\n                responseType: \"blob\",\n            })\n            .then((response) => {\n                const fileURL = window.URL.createObjectURL(new Blob([response.data]));\n                const fileLink = document.createElement(\"a\");\n\n                fileLink.href = fileURL;\n                fileLink.setAttribute(\"download\", \"random.xls\");\n                document.body.appendChild(fileLink);\n\n                fileLink.click();\n            });\n    };\n    return (\n        <div style={{ margin: '50px' }}>\n            <Grid container justify='center'>\n                <Grid item xs={8}>\n                    <Typography variant='h6'>Randomizer Infromation</Typography>\n                    <Grid>\n                        <Table size='small' aria-label='a dense table'>\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>#</TableCell>\n                                    <TableCell align='right'>Type</TableCell>\n                                    <TableCell align='right'>Items</TableCell>\n                                    <TableCell align='right'>Result</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {data.map((item, index) => (\n                                    <TableRow key={index}>\n                                        <TableCell component='th' scope='row'>\n                                            {index + 1}\n                                        </TableCell>\n                                        <TableCell align='right'>{item.type}</TableCell>\n                                        <TableCell align='right'>\n                                            {item.data.items.join(' | ')}\n                                        </TableCell>\n                                        <TableCell align='right'>\n                                            {item.data.result.join(' | ')}\n                                        </TableCell>\n                                        {/*<TableCell align=\"right\">\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"secondary\"\n                                                onClick={handleDelete(item.id)}\n                                                startIcon={<DeleteIcon />}\n                                            >\n                                            </Button>\n                                        </TableCell>\n                                        */}\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </Grid>\n                </Grid>\n                <Grid style={{ margin: '30px' }}>\n                    <Button\n                        variant='contained'\n                        className='bg-secondary text-light'\n                        onClick={handleExport}\n                        startIcon={<ImportExportIcon />}\n                    ></Button>\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n// <div className={classes.demo}>\n//     <List>\n//         {data.map((item, index) => (\n\n//             <ListItem>\n//                 <ListItemAvatar>\n//                     <Avatar>\n//                         <FolderIcon />\n//                     </Avatar>\n//                 </ListItemAvatar>\n//                 <ListItemText\n//                     secondary={secondary ? 'Secondary text' : null}\n//                 >{index + 1},  {item.data.items.join(\",\")}  {item.data.result}</ListItemText>\n//                 <ListItemText\n//                     secondary={secondary ? 'Secondary text' : null}\n//                 ></ListItemText>\n//                 <ListItemText\n\n//                 >{ }</ListItemText>\n//                 <ListItemSecondaryAction>\n//                     <IconButton edge=\"end\" aria-label=\"delete\">\n//                         <DeleteIcon />\n//                     </IconButton>\n//                 </ListItemSecondaryAction>\n//             </ListItem>\n//         ))}\n//     </List>\n// </div>\n","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/services/UrlService.js",[],"/Users/cheakimhokmao/Documents/cs313_team_one/src/components/basicCal/component/App.js",[],"/Users/cheakimhokmao/Documents/cs313_team_one/src/components/SideMenu.js",[],"/Users/cheakimhokmao/Documents/cs313_team_one/src/components/randomizer/Body.js",["127","128","129"],"import React, { useLayoutEffect } from 'react';\nimport { Button, Row, Col, Form } from 'react-bootstrap';\nimport { useForm } from 'react-hook-form';\n\nexport default class Body extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentTextareaValue: '',\n            qty: React.createRef(),\n            data: \"\",\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        const a = this.state.data;\n        const b = a.split('\\n').filter((item) => item !== '');\n\n        if (this.props.teamGenerator) {\n            this.props.onGetQty(this.state.qty.current.value);\n            this.props.onGetData(b);\n        } else {\n            this.props.onGetData(b);\n        }\n        if (this.props.getType == 6) {\n            this.setState({\n                data: \"Yes\\nNo\"\n            })\n        }\n\n    }\n    handleChange(event) {\n        this.setState({ data: event.target.value });\n\n    }\n    render() {\n        let shows;\n        let teamGen;\n        let picker;\n        let customList;\n\n        if (this.props.teamGenerator) {\n            shows = (\n                <div className=\"justify-content-center\">\n                    <label className='txt-group justify-content-center'>Groups </label>\n                    <input type='number' ref={this.state.qty} className='input-qty' />\n                </div>\n            );\n\n            teamGen = (\n                <div className='result-body-teamgen'>\n                    {this.props.getResult.map((item, index) => (\n                        <ul key={index}>\n                            <h5>Team {index + 1}</h5>\n                            <li>{item.join(' /  ')}</li>\n                        </ul>\n                    ))}\n                </div>\n            );\n        }\n\n\n        picker = <div className='result-body'>{this.props.getResult}</div>;\n\n        customList = (\n            <div className='result-body-teamgen'>\n                {this.props.getResult.map((item, index) => (\n                    <ul key={index}>\n                        {index + 1}. {item}\n                    </ul>\n                ))}\n            </div>\n        );\n        return (\n            <Form onSubmit={this.handleSubmit}>\n                <Row className='randomizer-body'>\n                    <Form.Group controlId='exampleForm.ControlTextarea1' className='result-item-nav'>\n                        <Form.Label>ITEMS :</Form.Label>\n                        <Form.Control\n                            as='textarea'\n                            rows={15}\n                            className='item-body'\n                            value={this.state.data}\n                            onChange={this.handleChange}\n                        // ref={this.state.data}\n                        />\n                    </Form.Group>\n                    <Form.Group className='result-item-nav'>\n                        <Form.Label>RESULT : </Form.Label>\n                        {this.props.teamGenerator\n                            ? teamGen\n                            : this.props.customListItem\n                                ? customList\n                                : picker}\n                        {/*<Form.Control readOnly rows={15} value={this.props.getResult}></Form.Control>*/}\n                    </Form.Group>\n                </Row>\n                <Row className='justify-content-md-center body-sumbit'>\n                    <Col md='auto'>{shows}</Col>\n                    <Col md=' auto'>\n                        <Button\n                            as='input'\n                            type='submit'\n                            variant='secondary'\n                            value='Submit'\n                            className='submit'\n                        />{' '}\n                    </Col>\n                </Row>\n            </Form>\n        );\n    }\n}\n","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/randomizer/Nav.js",["130"],"import React from 'react'\nimport './App.css';\n\nconst Nav = (props) => {\n    const navMenu = [\n        'Random Picker',\n        'Custom List',\n        'Decision Maker',\n        'Name Picker',\n        'Team Generator',\n        'Yes or No',\n    ];\n    const [active, setActive] = React.useState(null);\n\n    const handleSelectRandomizer = (id, item) => {\n        setActive(id)\n        props.onSelectRandomizer(item)\n    };\n\n    let randomizer_nav = \"randomizer-nav\";\n    return (\n        <ul className='randomizer-navbar'>\n            {\n                navMenu.map((item, index) => (\n                    <li id=\"myDIV\" className={\n                        index === active ? \"active\" : \"randomizer-nav\"\n                    } onClick={() => handleSelectRandomizer(index, item)}>{item}</li>\n                ))\n            }\n        </ul>\n    );\n};\n\nexport default Nav;\n\n        // <li className='randomizer-nav active' onClick={() => handleSelectRandomizer('Custom List')} activeClass=\"active\">a</li>\n        // <li className='randomizer-nav' onClick={() => props.onSelectRandomizer('Decision Maker')} activeClass=\"active\">a</li>\n        // <li className='randomizer-nav' onClick={() => props.onSelectRandomizer('Name Picker')} activeClass=\"active\">a</li>\n        // <li className='randomizer-nav' onClick={() => props.onSelectRandomizer('Team Generator')} activeClass=\"active\">a</li>\n        // <li className='randomizer-nav' onClick={() => props.onSelectRandomizer('Yes or No')}>a</li>\n","/Users/cheakimhokmao/Documents/cs313_team_one/src/components/basicCal/component/ButtonPanel.js",[],"/Users/cheakimhokmao/Documents/cs313_team_one/src/components/basicCal/component/Display.js",[],"/Users/cheakimhokmao/Documents/cs313_team_one/src/components/basicCal/logic/calculate.js",["131","132"],"/Users/cheakimhokmao/Documents/cs313_team_one/src/components/basicCal/component/Button.js",[],"/Users/cheakimhokmao/Documents/cs313_team_one/src/components/basicCal/logic/operate.js",["133"],"/Users/cheakimhokmao/Documents/cs313_team_one/src/components/basicCal/logic/isNumber.js",[],{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","severity":1,"message":"139","line":62,"column":63,"nodeType":"140","messageId":"141","endLine":62,"endColumn":64,"suggestions":"142"},{"ruleId":"138","severity":1,"message":"139","line":62,"column":79,"nodeType":"140","messageId":"141","endLine":62,"endColumn":80,"suggestions":"143"},{"ruleId":"138","severity":1,"message":"139","line":58,"column":63,"nodeType":"140","messageId":"141","endLine":58,"endColumn":64,"suggestions":"144"},{"ruleId":"138","severity":1,"message":"139","line":58,"column":79,"nodeType":"140","messageId":"141","endLine":58,"endColumn":80,"suggestions":"145"},{"ruleId":"146","severity":1,"message":"147","line":8,"column":10,"nodeType":"148","messageId":"149","endLine":8,"endColumn":14},{"ruleId":"138","severity":1,"message":"139","line":45,"column":63,"nodeType":"140","messageId":"141","endLine":45,"endColumn":64,"suggestions":"150"},{"ruleId":"138","severity":1,"message":"139","line":45,"column":79,"nodeType":"140","messageId":"141","endLine":45,"endColumn":80,"suggestions":"151"},{"ruleId":"146","severity":1,"message":"152","line":1,"column":25,"nodeType":"148","messageId":"149","endLine":1,"endColumn":33},{"ruleId":"146","severity":1,"message":"153","line":4,"column":10,"nodeType":"148","messageId":"149","endLine":4,"endColumn":28},{"ruleId":"146","severity":1,"message":"147","line":7,"column":10,"nodeType":"148","messageId":"149","endLine":7,"endColumn":14},{"ruleId":"154","severity":1,"message":"155","line":305,"column":38,"nodeType":"156","messageId":"157","endLine":305,"endColumn":42},{"ruleId":"146","severity":1,"message":"158","line":8,"column":8,"nodeType":"148","messageId":"149","endLine":8,"endColumn":14},{"ruleId":"146","severity":1,"message":"159","line":1,"column":8,"nodeType":"148","messageId":"149","endLine":1,"endColumn":13},{"ruleId":"146","severity":1,"message":"160","line":4,"column":10,"nodeType":"148","messageId":"149","endLine":4,"endColumn":19},{"ruleId":"146","severity":1,"message":"161","line":4,"column":26,"nodeType":"148","messageId":"149","endLine":4,"endColumn":29},{"ruleId":"146","severity":1,"message":"147","line":7,"column":10,"nodeType":"148","messageId":"149","endLine":7,"endColumn":14},{"ruleId":"146","severity":1,"message":"162","line":1,"column":17,"nodeType":"148","messageId":"149","endLine":1,"endColumn":32},{"ruleId":"146","severity":1,"message":"163","line":3,"column":10,"nodeType":"148","messageId":"149","endLine":3,"endColumn":17},{"ruleId":"164","severity":1,"message":"165","line":28,"column":32,"nodeType":"166","messageId":"157","endLine":28,"endColumn":34},{"ruleId":"146","severity":1,"message":"167","line":20,"column":9,"nodeType":"148","messageId":"149","endLine":20,"endColumn":23},{"ruleId":"146","severity":1,"message":"168","line":1,"column":8,"nodeType":"148","messageId":"149","endLine":1,"endColumn":11},{"ruleId":"164","severity":1,"message":"169","line":56,"column":19,"nodeType":"166","messageId":"157","endLine":56,"endColumn":21},{"ruleId":"164","severity":1,"message":"165","line":20,"column":13,"nodeType":"166","messageId":"157","endLine":20,"endColumn":15},"no-native-reassign",["170"],"no-negated-in-lhs",["171"],"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["172","173"],["174","175"],["176","177"],["178","179"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar",["180","181"],["182","183"],"'useState' is defined but never used.","'BsFillEnvelopeFill' is defined but never used.","no-eval","eval can be harmful.","CallExpression","unexpected","'Avatar' is defined but never used.","'react' is defined but never used.","'Container' is defined but never used.","'Col' is defined but never used.","'useLayoutEffect' is defined but never used.","'useForm' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'randomizer_nav' is assigned a value but never used.","'Big' is defined but never used.","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation",{"messageId":"184","fix":"185","desc":"186"},{"messageId":"187","fix":"188","desc":"189"},{"messageId":"184","fix":"190","desc":"186"},{"messageId":"187","fix":"191","desc":"189"},{"messageId":"184","fix":"192","desc":"186"},{"messageId":"187","fix":"193","desc":"189"},{"messageId":"184","fix":"194","desc":"186"},{"messageId":"187","fix":"195","desc":"189"},{"messageId":"184","fix":"196","desc":"186"},{"messageId":"187","fix":"197","desc":"189"},{"messageId":"184","fix":"198","desc":"186"},{"messageId":"187","fix":"199","desc":"189"},"removeEscape",{"range":"200","text":"201"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"202","text":"203"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"204","text":"201"},{"range":"205","text":"203"},{"range":"206","text":"201"},{"range":"207","text":"203"},{"range":"208","text":"201"},{"range":"209","text":"203"},{"range":"210","text":"201"},{"range":"211","text":"203"},{"range":"212","text":"201"},{"range":"213","text":"203"},[2284,2285],"",[2284,2284],"\\",[2300,2301],[2300,2300],[2275,2276],[2275,2275],[2291,2292],[2291,2291],[1946,1947],[1946,1946],[1962,1963],[1962,1962]]
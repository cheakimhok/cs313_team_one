[{"/Users/venxinglay/Desktop/cs313_team_one/src/index.js":"1","/Users/venxinglay/Desktop/cs313_team_one/src/reportWebVitals.js":"2","/Users/venxinglay/Desktop/cs313_team_one/src/App.js":"3","/Users/venxinglay/Desktop/cs313_team_one/src/components/Main.js":"4","/Users/venxinglay/Desktop/cs313_team_one/src/components/Header.js":"5","/Users/venxinglay/Desktop/cs313_team_one/src/components/SignUp.js":"6","/Users/venxinglay/Desktop/cs313_team_one/src/components/ConfirmEmail.js":"7","/Users/venxinglay/Desktop/cs313_team_one/src/components/SignIn.js":"8","/Users/venxinglay/Desktop/cs313_team_one/src/components/ConfirmPassword.js":"9","/Users/venxinglay/Desktop/cs313_team_one/src/components/SideMenu.js":"10","/Users/venxinglay/Desktop/cs313_team_one/src/components/services/UrlService.js":"11","/Users/venxinglay/Desktop/cs313_team_one/src/components/services/AuthService.js":"12","/Users/venxinglay/Desktop/cs313_team_one/src/components/services/CookieService.js":"13","/Users/venxinglay/Desktop/cs313_team_one/src/components/randomizer/App.js":"14","/Users/venxinglay/Desktop/cs313_team_one/src/components/randomizer/Nav.js":"15","/Users/venxinglay/Desktop/cs313_team_one/src/components/randomizer/Body.js":"16","/Users/venxinglay/Desktop/cs313_team_one/src/components/randomizer/InformationRandomizer.js":"17"},{"size":603,"mtime":1614235819922,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1610899975235,"results":"20","hashOfConfig":"19"},{"size":290,"mtime":1612761295859,"results":"21","hashOfConfig":"19"},{"size":2023,"mtime":1614275065176,"results":"22","hashOfConfig":"19"},{"size":2583,"mtime":1614315009743,"results":"23","hashOfConfig":"19"},{"size":7622,"mtime":1614238472050,"results":"24","hashOfConfig":"19"},{"size":4216,"mtime":1614239977993,"results":"25","hashOfConfig":"19"},{"size":6643,"mtime":1614239280221,"results":"26","hashOfConfig":"19"},{"size":5670,"mtime":1614328424658,"results":"27","hashOfConfig":"19"},{"size":591,"mtime":1614326184867,"results":"28","hashOfConfig":"19"},{"size":1397,"mtime":1614321848310,"results":"29","hashOfConfig":"19"},{"size":1001,"mtime":1614235470371,"results":"30","hashOfConfig":"19"},{"size":331,"mtime":1612760727246,"results":"31","hashOfConfig":"19"},{"size":4432,"mtime":1614339006509,"results":"32","hashOfConfig":"19"},{"size":739,"mtime":1614332737626,"results":"33","hashOfConfig":"19"},{"size":3290,"mtime":1614338719300,"results":"34","hashOfConfig":"19"},{"size":5697,"mtime":1614331659669,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"b9ztk1",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/venxinglay/Desktop/cs313_team_one/src/index.js",[],["75","76"],"/Users/venxinglay/Desktop/cs313_team_one/src/reportWebVitals.js",[],"/Users/venxinglay/Desktop/cs313_team_one/src/App.js",[],"/Users/venxinglay/Desktop/cs313_team_one/src/components/Main.js",[],"/Users/venxinglay/Desktop/cs313_team_one/src/components/Header.js",["77"],"/Users/venxinglay/Desktop/cs313_team_one/src/components/SignUp.js",["78","79"],"import React, { useRef } from 'react';\n\nimport { Container, Col, Row, Form, Button } from 'react-bootstrap';\nimport { BsFillEnvelopeFill, BsLockFill } from 'react-icons/bs';\nimport { useForm } from 'react-hook-form';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport UrlService from './services/UrlService';\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom.min';\n\nconst SignUp = (props) => {\n    const { register, handleSubmit, errors, watch } = useForm({\n        criteriaMode: 'all',\n    });\n\n    const history = useHistory();\n    const onSubmit = (data) => {\n\n        axios.post(UrlService.registerUrl(), data).then(\n            res => {\n                if (res.data.user) {\n                    localStorage.setItem('access_token', res.data.access_token);\n                    props.setUser(res.data.user);\n                    history.push('/randomizer')\n                }\n\n            }\n        ).catch(\n            err => {\n                alert(err.response.data.errors.email.join(', '))\n            }\n        )\n    }\n\n    const password = useRef({});\n    password.current = watch('password', '');\n\n    return (\n        <>\n            <Container id='sign-up'>\n                <Row className='justify-content-center'>\n                    <p className='form-title'>Sign Up</p>\n                </Row>\n                <Row className='justify-content-center paragraph'>\n                    <p className='mb-5 form-subtitle'>Create Your Free Account</p>\n                </Row>\n                <Form fluid='md' onSubmit={handleSubmit(onSubmit)}>\n                    <Row className='justify-content-center'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text'>\n                                <Form.Label className='form-label'>Email</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        autoComplete='off'\n                                        ref={register({\n                                            required: 'This is required.',\n                                            pattern: {\n                                                value: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n                                                message: 'Invalid Email Address',\n                                            },\n                                        })}\n                                        name='email'\n                                        className='from-control'\n                                        type='email'\n                                        placeholder='Enter Email'\n                                        required\n                                    />\n                                    {errors.email && <p style={{ color: 'red' }}>{errors.email.message}</p>}\n\n                                    <BsFillEnvelopeFill className='input-icon' />\n                                </div>\n                                <Form.Text className='text-muted'></Form.Text>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className='justify-content-center'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text'>\n                                <Form.Label className='form-label'>Password</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        autoComplete='off'\n                                        name='password'\n                                        type='password'\n                                        ref={register({\n                                            required: 'This is required.',\n                                            minLength: {\n                                                value: 8,\n                                                message: 'Password must have at least 8 characters',\n                                            },\n                                            maxLength: {\n                                                value: 20,\n                                                message: 'Password must have less than 20 characters',\n                                            },\n                                        })}\n                                        required\n                                        placeholder='Enter password'\n                                    />\n                                    {errors.password && (\n                                        <p style={{ color: 'red' }}>{errors.password.message}</p>\n                                    )}\n                                    <BsLockFill className='input-icon'></BsLockFill>\n                                </div>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className='justify-content-center mb-3'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text'>\n                                <Form.Label className='form-label'>Confirm Password</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        autoComplete='off'\n                                        required\n                                        placeholder='Confirm Password'\n                                        name='password_confirmation'\n                                        type='password'\n                                        ref={register({\n                                            validate: (value) =>\n                                                value === password.current || 'The passwords do not match',\n                                        })}\n                                    />\n                                    {errors.password_confirmation && (\n                                        <p style={{ color: 'red' }}>{errors.password_confirmation.message}</p>\n                                    )}\n                                    <BsLockFill className='input-icon'></BsLockFill>\n                                </div>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className='mb-4'>\n                        <Col style={{ textAlign: 'center' }}>\n                            Already have an account?\n                            <Link\n                                to='/signin'\n                                style={{\n                                    color: '#52616b',\n                                    fontWeight: '600px',\n                                    marginLeft: '5px',\n                                    textDecoration: 'none',\n                                }}>\n                                Sign In\n                            </Link>\n                        </Col>\n                    </Row>\n                    <Row className='mb-4'>\n                        <Col style={{ textAlign: 'center' }}>\n                            <Button className='sign-button' variant='white' type='submit'>\n                                Sign Up\n                            </Button>\n                        </Col>\n                    </Row>\n                </Form>\n            </Container>\n        </>\n    );\n};\n\nexport default SignUp;","/Users/venxinglay/Desktop/cs313_team_one/src/components/ConfirmEmail.js",["80","81","82"],"import React from 'react';\nimport './Authentication.css';\nimport { Container, Col, Row, Form, Button } from 'react-bootstrap';\nimport { BsFillEnvelopeFill } from 'react-icons/bs';\nimport { useForm } from 'react-hook-form';\nimport { ErrorMessage } from '@hookform/error-message';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport UrlService from './services/UrlService';\n\nconst ConfirmEmail = () => {\n    const { register, handleSubmit, errors } = useForm({\n        criteriaMode: 'all',\n    });\n\n    const onSubmit = (data) => {\n        axios.post(UrlService.forgotUrl(), data).then((res) => {\n            console.log(res);\n            alert(res.data.message)\n        }).catch((err) => {\n            alert(err.response.data.message)\n        });\n    };\n\n    return (\n        <>\n            <Container id='confirm-email'>\n                <Row className='justify-content-center'>\n                    <p className='form-title'>Reset Password</p>\n                </Row>\n                <Row className='justify-content-center paragraph'>\n                    <p className='mb-5 form-subtitle'>Please enter your email</p>\n                </Row>\n                <Form fluid='md' onSubmit={handleSubmit(onSubmit)}>\n                    <Row className='justify-content-center'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text' controlId='formBasicEmail'>\n                                <Form.Label className='form-label'>Email</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        autoComplete='off'\n                                        ref={register({\n                                            required: 'This is required.',\n                                            pattern: {\n                                                value: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n                                                message: 'Invalid Email Address',\n                                            },\n                                        })}\n                                        name='email'\n                                        className='from-control'\n                                        type='email'\n                                        placeholder='Enter Email'\n                                        required\n                                    />\n                                    <ErrorMessage\n                                        errors={errors}\n                                        name='email'\n                                        render={({ messages }) => {\n                                            return messages\n                                                ? Object.entries(messages).map(\n                                                    ([type, message]) => (\n                                                        <p style={{ color: 'red' }} key={type}>\n                                                            {message}\n                                                        </p>\n                                                    )\n                                                )\n                                                : null;\n                                        }}\n                                    />\n                                    <BsFillEnvelopeFill className='input-icon' />\n                                </div>\n                                <Form.Text className='text-muted'></Form.Text>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <br></br>\n                    <br></br>\n                    <Row className='mb-4'>\n                        <Col style={{ textAlign: 'center' }}>\n                            <Button className='confirm-email-button' variant='white' type='submit'>\n                                Send Password Reset Link\n                            </Button>\n                        </Col>\n                    </Row>\n                </Form>\n            </Container>\n        </>\n    );\n};\n\nexport default ConfirmEmail;\n","/Users/venxinglay/Desktop/cs313_team_one/src/components/SignIn.js",["83","84"],"\nimport '../App.css';\nimport { Container, Col, Row, Form, Button } from 'react-bootstrap';\nimport { BsFillEnvelopeFill, BsLockFill } from 'react-icons/bs';\nimport { useForm } from 'react-hook-form';\nimport { ErrorMessage } from '@hookform/error-message';\nimport { Link } from 'react-router-dom';\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom.min';\nimport UrlService from './services/UrlService'\nimport axios from \"axios\"\n\n\n\n\n\n\n\nconst SignIn = (props) => {\n    const history = useHistory();\n    const { register, handleSubmit, errors } = useForm({\n        criteriaMode: 'all',\n    });\n\n    //Handle Login\n    async function onSubmit(data) {\n        axios.post(UrlService.loginUrl(), data).then(\n            res => {\n                if (res.data.user) {\n                    localStorage.setItem('access_token', res.data.access_token);\n                    props.setUser(res.data.user);\n                    history.push('/randomizer')\n                }\n\n            }\n        ).catch(\n            err => {\n                console.log(err)\n                alert(err.response.data.message)\n            }\n        )\n    }\n\n    return (\n        <>\n            <Container id='sign-in'>\n                <Row className='justify-content-center'>\n                    <p className='form-title'>Sign In</p>\n                </Row>\n                <Row className='justify-content-center paragraph'>\n                    <p className='mb-5 form-subtitle'>Let's Get Started</p>\n                </Row>\n                <Form fluid='md' onSubmit={handleSubmit(onSubmit)}>\n                    <Row className='justify-content-center'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text' controlId='formBasicEmail'>\n                                <Form.Label className='form-label'>Email</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        autoComplete='off'\n                                        ref={register({\n                                            required: 'This is required.',\n                                            pattern: {\n                                                value: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n                                                message: 'Invalid Email Address',\n                                            },\n                                        })}\n                                        name='email'\n                                        className='from-control'\n                                        type='email'\n                                        placeholder='Enter Email'\n                                        required\n                                    />\n                                    <ErrorMessage\n                                        errors={errors}\n                                        name='email'\n                                        render={({ messages }) => {\n                                            return messages\n                                                ? Object.entries(messages).map(([type, message]) => (\n                                                    <p style={{ color: 'red' }} key={type}>\n                                                        {message}\n                                                    </p>\n                                                ))\n                                                : null;\n                                        }}\n                                    />\n                                    <BsFillEnvelopeFill className='input-icon' />\n                                </div>\n                                <Form.Text className='text-muted'></Form.Text>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className='justify-content-center'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text' controlId='formBasicPassword'>\n                                <Form.Label className='form-label'>Password</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        className='from-control'\n                                        type='password'\n                                        placeholder='Enter Password'\n                                        name='password'\n                                        ref={register({\n                                            required: 'This is required.'\n                                        })}\n                                        required\n                                    />\n                                    <BsLockFill className='input-icon'></BsLockFill>\n                                </div>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className='mb-4 mt-3'>\n                        <Col style={{ textAlign: 'center' }}>\n                            <Link\n                                to='/password/forgot'\n                                style={{\n                                    fontSize: '800',\n                                }}>\n                                Forgotten Password?\n                            </Link>\n                        </Col>\n                    </Row>\n                    <Row className='mb-4 mt-3'>\n                        <Col style={{ textAlign: 'center' }}>\n                            Don't have an account yet?\n                            <Link\n                                to='/signup'\n                                style={{\n                                    fontSize: '800',\n                                    color: '#52616b',\n                                    marginLeft: '5px',\n                                    textDecoration: 'none',\n                                }}>\n                                Sign Up\n                            </Link>\n                        </Col>\n                    </Row>\n                    <Row className='mb-4'>\n                        <Col style={{ textAlign: 'center' }}>\n                            <Button className='sign-button' variant='white' type='submit'>\n                                Sign In\n                            </Button>\n                        </Col>\n                    </Row>\n                </Form>\n            </Container>\n        </>\n    );\n};\n\nexport default SignIn;","/Users/venxinglay/Desktop/cs313_team_one/src/components/ConfirmPassword.js",["85","86","87"],"/Users/venxinglay/Desktop/cs313_team_one/src/components/SideMenu.js",[],"/Users/venxinglay/Desktop/cs313_team_one/src/components/services/UrlService.js",[],"/Users/venxinglay/Desktop/cs313_team_one/src/components/services/AuthService.js",[],"/Users/venxinglay/Desktop/cs313_team_one/src/components/services/CookieService.js",[],["88","89"],"/Users/venxinglay/Desktop/cs313_team_one/src/components/randomizer/App.js",["90","91","92"],"/Users/venxinglay/Desktop/cs313_team_one/src/components/randomizer/Nav.js",["93","94","95","96","97","98","99"],"/Users/venxinglay/Desktop/cs313_team_one/src/components/randomizer/Body.js",["100","101","102","103","104"],"/Users/venxinglay/Desktop/cs313_team_one/src/components/randomizer/InformationRandomizer.js",["105"],{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":8,"column":8,"nodeType":"112","messageId":"113","endLine":8,"endColumn":14},{"ruleId":"114","severity":1,"message":"115","line":58,"column":63,"nodeType":"116","messageId":"117","endLine":58,"endColumn":64,"suggestions":"118"},{"ruleId":"114","severity":1,"message":"115","line":58,"column":79,"nodeType":"116","messageId":"117","endLine":58,"endColumn":80,"suggestions":"119"},{"ruleId":"110","severity":1,"message":"120","line":8,"column":10,"nodeType":"112","messageId":"113","endLine":8,"endColumn":14},{"ruleId":"114","severity":1,"message":"115","line":45,"column":63,"nodeType":"116","messageId":"117","endLine":45,"endColumn":64,"suggestions":"121"},{"ruleId":"114","severity":1,"message":"115","line":45,"column":79,"nodeType":"116","messageId":"117","endLine":45,"endColumn":80,"suggestions":"122"},{"ruleId":"114","severity":1,"message":"115","line":63,"column":63,"nodeType":"116","messageId":"117","endLine":63,"endColumn":64,"suggestions":"123"},{"ruleId":"114","severity":1,"message":"115","line":63,"column":79,"nodeType":"116","messageId":"117","endLine":63,"endColumn":80,"suggestions":"124"},{"ruleId":"110","severity":1,"message":"125","line":1,"column":25,"nodeType":"112","messageId":"113","endLine":1,"endColumn":33},{"ruleId":"110","severity":1,"message":"126","line":4,"column":10,"nodeType":"112","messageId":"113","endLine":4,"endColumn":28},{"ruleId":"110","severity":1,"message":"120","line":7,"column":10,"nodeType":"112","messageId":"113","endLine":7,"endColumn":14},{"ruleId":"106","replacedBy":"127"},{"ruleId":"108","replacedBy":"128"},{"ruleId":"110","severity":1,"message":"129","line":1,"column":8,"nodeType":"112","messageId":"113","endLine":1,"endColumn":13},{"ruleId":"110","severity":1,"message":"130","line":4,"column":10,"nodeType":"112","messageId":"113","endLine":4,"endColumn":19},{"ruleId":"110","severity":1,"message":"131","line":4,"column":26,"nodeType":"112","messageId":"113","endLine":4,"endColumn":29},{"ruleId":"110","severity":1,"message":"132","line":1,"column":10,"nodeType":"112","messageId":"113","endLine":1,"endColumn":21},{"ruleId":"110","severity":1,"message":"133","line":1,"column":23,"nodeType":"112","messageId":"113","endLine":1,"endColumn":38},{"ruleId":"110","severity":1,"message":"130","line":2,"column":10,"nodeType":"112","messageId":"113","endLine":2,"endColumn":19},{"ruleId":"110","severity":1,"message":"131","line":2,"column":21,"nodeType":"112","messageId":"113","endLine":2,"endColumn":24},{"ruleId":"110","severity":1,"message":"134","line":2,"column":31,"nodeType":"112","messageId":"113","endLine":2,"endColumn":40},{"ruleId":"110","severity":1,"message":"135","line":2,"column":42,"nodeType":"112","messageId":"113","endLine":2,"endColumn":45},{"ruleId":"110","severity":1,"message":"120","line":3,"column":10,"nodeType":"112","messageId":"113","endLine":3,"endColumn":14},{"ruleId":"110","severity":1,"message":"133","line":1,"column":17,"nodeType":"112","messageId":"113","endLine":1,"endColumn":32},{"ruleId":"110","severity":1,"message":"136","line":2,"column":28,"nodeType":"112","messageId":"113","endLine":2,"endColumn":32},{"ruleId":"110","severity":1,"message":"134","line":2,"column":34,"nodeType":"112","messageId":"113","endLine":2,"endColumn":43},{"ruleId":"110","severity":1,"message":"137","line":2,"column":45,"nodeType":"112","messageId":"113","endLine":2,"endColumn":58},{"ruleId":"110","severity":1,"message":"138","line":3,"column":10,"nodeType":"112","messageId":"113","endLine":3,"endColumn":17},{"ruleId":"110","severity":1,"message":"120","line":7,"column":10,"nodeType":"112","messageId":"113","endLine":7,"endColumn":14},"no-native-reassign",["139"],"no-negated-in-lhs",["140"],"no-unused-vars","'Avatar' is defined but never used.","Identifier","unusedVar","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["141","142"],["143","144"],"'Link' is defined but never used.",["145","146"],["147","148"],["149","150"],["151","152"],"'useState' is defined but never used.","'BsFillEnvelopeFill' is defined but never used.",["139"],["140"],"'react' is defined but never used.","'Container' is defined but never used.","'Col' is defined but never used.","'useCallback' is defined but never used.","'useLayoutEffect' is defined but never used.","'ListGroup' is defined but never used.","'Tab' is defined but never used.","'Card' is defined but never used.","'ListGroupItem' is defined but never used.","'useForm' is defined but never used.","no-global-assign","no-unsafe-negation",{"messageId":"153","fix":"154","desc":"155"},{"messageId":"156","fix":"157","desc":"158"},{"messageId":"153","fix":"159","desc":"155"},{"messageId":"156","fix":"160","desc":"158"},{"messageId":"153","fix":"161","desc":"155"},{"messageId":"156","fix":"162","desc":"158"},{"messageId":"153","fix":"163","desc":"155"},{"messageId":"156","fix":"164","desc":"158"},{"messageId":"153","fix":"165","desc":"155"},{"messageId":"156","fix":"166","desc":"158"},{"messageId":"153","fix":"167","desc":"155"},{"messageId":"156","fix":"168","desc":"158"},"removeEscape",{"range":"169","text":"170"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"171","text":"172"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"173","text":"170"},{"range":"174","text":"172"},{"range":"175","text":"170"},{"range":"176","text":"172"},{"range":"177","text":"170"},{"range":"178","text":"172"},{"range":"179","text":"170"},{"range":"180","text":"172"},{"range":"181","text":"170"},{"range":"182","text":"172"},[2275,2276],"",[2275,2275],"\\",[2291,2292],[2291,2291],[1946,1947],[1946,1946],[1962,1963],[1962,1962],[2285,2286],[2285,2285],[2301,2302],[2301,2301]]
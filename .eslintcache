[{"/Users/cheakimhokmao/cs313-team-one/src/index.js":"1","/Users/cheakimhokmao/cs313-team-one/src/App.js":"2","/Users/cheakimhokmao/cs313-team-one/src/components/Main.js":"3","/Users/cheakimhokmao/cs313-team-one/src/components/basicCal/component/App.js":"4","/Users/cheakimhokmao/cs313-team-one/src/components/Header.js":"5","/Users/cheakimhokmao/cs313-team-one/src/components/SignUp.js":"6","/Users/cheakimhokmao/cs313-team-one/src/components/SignIn.js":"7","/Users/cheakimhokmao/cs313-team-one/src/components/basicCal/component/Display.js":"8","/Users/cheakimhokmao/cs313-team-one/src/components/basicCal/component/ButtonPanel.js":"9","/Users/cheakimhokmao/cs313-team-one/src/components/basicCal/logic/calculate.js":"10","/Users/cheakimhokmao/cs313-team-one/src/components/SideMenu.js":"11","/Users/cheakimhokmao/cs313-team-one/src/components/basicCal/component/Button.js":"12","/Users/cheakimhokmao/cs313-team-one/src/components/basicCal/logic/operate.js":"13","/Users/cheakimhokmao/cs313-team-one/src/components/basicCal/logic/isNumber.js":"14"},{"size":168,"mtime":1611974134998,"results":"15","hashOfConfig":"16"},{"size":459,"mtime":1611974134990,"results":"17","hashOfConfig":"16"},{"size":617,"mtime":1611974171929,"results":"18","hashOfConfig":"16"},{"size":1849,"mtime":1611974134991,"results":"19","hashOfConfig":"16"},{"size":1800,"mtime":1611474784321,"results":"20","hashOfConfig":"16"},{"size":7011,"mtime":1611973672880,"results":"21","hashOfConfig":"16"},{"size":5321,"mtime":1611973672880,"results":"22","hashOfConfig":"16"},{"size":356,"mtime":1611974134995,"results":"23","hashOfConfig":"16"},{"size":2057,"mtime":1611974134993,"results":"24","hashOfConfig":"16"},{"size":3433,"mtime":1611974134995,"results":"25","hashOfConfig":"16"},{"size":482,"mtime":1611583406952,"results":"26","hashOfConfig":"16"},{"size":734,"mtime":1611974134992,"results":"27","hashOfConfig":"16"},{"size":833,"mtime":1611974134997,"results":"28","hashOfConfig":"16"},{"size":76,"mtime":1611974134997,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"9lrum",{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/cheakimhokmao/cs313-team-one/src/index.js",[],["64","65"],"/Users/cheakimhokmao/cs313-team-one/src/App.js",["66","67"],"import './App.css';\nimport React from \"react\";\nimport Main from './components/Main';\nimport BasicCal from './components/basicCal/component/App'\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport { render } from '@testing-library/react';\n\nexport default class App extends React.Component {\n  render(){\n    return (\n        <Router>\n            <div className='App'>\n                <Main />\n            </div>\n        </Router>\n    );\n  }\n}\n\n\n","/Users/cheakimhokmao/cs313-team-one/src/components/Main.js",[],"/Users/cheakimhokmao/cs313-team-one/src/components/basicCal/component/App.js",["68","69"],"import React from \"react\";\nimport Display from \"./Display\";\nimport ButtonPanel from \"./ButtonPanel\";\nimport calculate from \"../logic/calculate\";\nimport \"../../../App.css\";\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { object } from \"prop-types\";\n\n\nexport default class BasicCal extends React.Component {\n  state = {\n    total: null,\n    next: null,\n    operation: null,\n    memory: null,\n  };\n\n  handleClick = buttonName => {\n    \n    this.setState(calculate(this.state, buttonName));\n\n  };\n  clearLastChar() {\n    \n    this.setState({\n      next: this.state.next.substring(0, this.state.next.length - 1) || '0'\n    })\n  }\n  handleKeyDown = (event) => {\n    let { key } = event\n    \n    if (key === 'Enter')\n      key = '='\n    \n      if ((/\\d/).test(key)) {\n        event.preventDefault()\n        this.setState(calculate(this.state,key));\n      } else if (key === '*' || key === '-' || key === '+' || key === '/' || key === '=') {\n        event.preventDefault()\n        if(key === '*') {\n          key = 'x';\n        }\n        this.setState(calculate(this.state, key));\n      } else if (key === '.') {\n      event.preventDefault()\n      this.setState(calculate(this.state,'.'));\n    } else if (key === '%') {\n      event.preventDefault()\n      this.setState(calculate(this.state,'%'));\n    } else if (key === 'Backspace') {\n      event.preventDefault()\n      this.clearLastChar();\n    }\n  };\n  \n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyDown)\n  }\n  \n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyDown)\n  }\n\n  render() {\n    return (\n            <div className=\"component-app\">\n              <Display value={this.state.next || this.state.total || \"0\"} />\n              <ButtonPanel clickHandler={this.handleClick} />\n            </div>\n    );\n  }\n\n}\n","/Users/cheakimhokmao/cs313-team-one/src/components/Header.js",[],"/Users/cheakimhokmao/cs313-team-one/src/components/SignUp.js",["70","71"],"import React, { useRef } from 'react';\nimport '../App.css';\nimport { Container, Col, Row, Form, Button } from 'react-bootstrap';\nimport { BsFillEnvelopeFill, BsLockFill } from 'react-icons/bs';\nimport { useForm } from 'react-hook-form';\nimport { Link } from 'react-router-dom';\n\nconst SignUp = () => {\n    const { register, handleSubmit, errors, watch } = useForm({\n        criteriaMode: 'all',\n    });\n\n    const onSubmit = (data) => {\n        console.log(data);\n    };\n\n    const password = useRef({});\n    password.current = watch('password', '');\n\n    return (\n        <>\n            <Container id='sign-up'>\n                <Row className='justify-content-center'>\n                    <p className='form-title'>Sign Up</p>\n                </Row>\n                <Row className='justify-content-center paragraph'>\n                    <p className='mb-5 form-subtitle'>Create Your Free Account</p>\n                </Row>\n                <Form fluid='md' onSubmit={handleSubmit(onSubmit)}>\n                    <Row className='justify-content-center'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text'>\n                                <Form.Label className='form-label'>Email</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        autoComplete='off'\n                                        ref={register({\n                                            required: 'This is required.',\n                                            pattern: {\n                                                value: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n                                                message: 'Invalid Email Address',\n                                            },\n                                        })}\n                                        name='email'\n                                        className='from-control'\n                                        type='email'\n                                        placeholder='Enter Email'\n                                        required\n                                    />\n                                    {errors.email && <p style={{ color: 'red' }}>{errors.email.message}</p>}\n\n                                    <BsFillEnvelopeFill className='input-icon' />\n                                </div>\n                                <Form.Text className='text-muted'></Form.Text>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className='justify-content-center'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text'>\n                                <Form.Label className='form-label'>Password</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        autoComplete='off'\n                                        name='password'\n                                        type='password'\n                                        ref={register({\n                                            required: 'This is required.',\n                                            minLength: {\n                                                value: 8,\n                                                message: 'Password must have at least 8 characters',\n                                            },\n                                            maxLength: {\n                                                value: 20,\n                                                message: 'Password must have less than 20 characters',\n                                            },\n                                        })}\n                                        required\n                                        placeholder='Enter password'\n                                    />\n                                    {errors.password && (\n                                        <p style={{ color: 'red' }}>{errors.password.message}</p>\n                                    )}\n                                    <BsLockFill className='input-icon'></BsLockFill>\n                                </div>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className='justify-content-center mb-3'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text'>\n                                <Form.Label className='form-label'>Confirm Password</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        autoComplete='off'\n                                        required\n                                        placeholder='Confirm Password'\n                                        name='password_repeat'\n                                        type='password'\n                                        ref={register({\n                                            validate: (value) =>\n                                                value === password.current || 'The passwords do not match',\n                                        })}\n                                    />\n                                    {errors.password_repeat && (\n                                        <p style={{ color: 'red' }}>{errors.password_repeat.message}</p>\n                                    )}\n                                    <BsLockFill className='input-icon'></BsLockFill>\n                                </div>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className='mb-4'>\n                        <Col style={{ textAlign: 'center' }}>\n                            Already have an account?\n                            <Link\n                                to='/signin'\n                                style={{\n                                    color: '#52616b',\n                                    fontWeight: '600px',\n                                    marginLeft: '5px',\n                                    textDecoration: 'none',\n                                }}>\n                                Sign In\n                            </Link>\n                        </Col>\n                    </Row>\n                    <Row className='mb-4'>\n                        <Col style={{ textAlign: 'center' }}>\n                            <Button className='sign-button' variant='white' type='submit'>\n                                Sign Up\n                            </Button>\n                        </Col>\n                    </Row>\n                </Form>\n            </Container>\n        </>\n    );\n};\n\nexport default SignUp;","/Users/cheakimhokmao/cs313-team-one/src/components/SignIn.js",["72","73"],"import React from 'react';\nimport '../App.css';\nimport { Container, Col, Row, Form, Button } from 'react-bootstrap';\nimport { BsFillEnvelopeFill, BsLockFill } from 'react-icons/bs';\nimport { useForm } from 'react-hook-form';\nimport { ErrorMessage } from '@hookform/error-message';\nimport { Link } from 'react-router-dom';\n\nconst SignIn = () => {\n    const { register, handleSubmit, errors } = useForm({\n        criteriaMode: 'all',\n    });\n\n    const onSubmit = (data) => {\n        console.log(data);\n    };\n\n    return (\n        <>\n            <Container id='sign-in'>\n                <Row className='justify-content-center'>\n                    <p className='form-title'>Sign In</p>\n                </Row>\n                <Row className='justify-content-center paragraph'>\n                    <p className='mb-5 form-subtitle'>Let's Get Started</p>\n                </Row>\n                <Form fluid='md' onSubmit={handleSubmit(onSubmit)}>\n                    <Row className='justify-content-center'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text' controlId='formBasicEmail'>\n                                <Form.Label className='form-label'>Email</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        autoComplete='off'\n                                        ref={register({\n                                            required: 'This is required.',\n                                            pattern: {\n                                                value: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n                                                message: 'Invalid Email Address',\n                                            },\n                                        })}\n                                        name='email'\n                                        className='from-control'\n                                        type='email'\n                                        placeholder='Enter Email'\n                                        required\n                                    />\n                                    <ErrorMessage\n                                        errors={errors}\n                                        name='email'\n                                        render={({ messages }) => {\n                                            return messages\n                                                ? Object.entries(messages).map(([type, message]) => (\n                                                      <p style={{ color: 'red' }} key={type}>\n                                                          {message}\n                                                      </p>\n                                                  ))\n                                                : null;\n                                        }}\n                                    />\n                                    <BsFillEnvelopeFill className='input-icon' />\n                                </div>\n                                <Form.Text className='text-muted'></Form.Text>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className='justify-content-center'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text' controlId='formBasicPassword'>\n                                <Form.Label className='form-label'>Password</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        className='from-control'\n                                        type='password'\n                                        placeholder='Enter Password'\n                                        required\n                                    />\n                                    <BsLockFill className='input-icon'></BsLockFill>\n                                </div>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className='mb-4 mt-3'>\n                        <Col style={{ textAlign: 'center' }}>\n                            Don't have an account yet?\n                            <Link\n                                to='/signup'\n                                style={{\n                                    fontSize: '800',\n                                    color: '#52616b',\n                                    marginLeft: '5px',\n                                    textDecoration: 'none',\n                                }}>\n                                Sign Up\n                            </Link>\n                        </Col>\n                    </Row>\n                    <Row className='mb-4'>\n                        <Col style={{ textAlign: 'center' }}>\n                            <Button className='sign-button' variant='white' type='submit'>\n                                Sign In\n                            </Button>\n                        </Col>\n                    </Row>\n                </Form>\n            </Container>\n        </>\n    );\n};\n\nexport default SignIn;","/Users/cheakimhokmao/cs313-team-one/src/components/basicCal/component/Display.js",[],"/Users/cheakimhokmao/cs313-team-one/src/components/basicCal/component/ButtonPanel.js",[],"/Users/cheakimhokmao/cs313-team-one/src/components/basicCal/logic/calculate.js",["74","75"],"import Big from \"big.js\";\n\nimport operate from \"./operate\";\nimport isNumber from \"./isNumber\";\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:String      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === \"AC\") {\n    return {\n      total: null,\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    \n    if (buttonName === \"0\" && obj.next === \"0\") {\n      return {};\n    }\n    // If the length is over 9 prevent input from the user \n\n    if(obj.next?.length > 9)\n      return;\n      \n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        return { next: obj.next + buttonName };\n      }\n      return { next: buttonName };\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      const next = obj.next === \"0\" ? buttonName : obj.next + buttonName;\n      return {\n        next,\n        total: null,\n      };\n    }\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n  \n  if (buttonName === \"%\") {\n    if (obj.total != 0) {\n      const result = parseFloat(obj.total)/100;\n      return {\n        total: result,\n        next: parseFloat(obj.next)/100,\n        operation: null\n        \n      };\n    }\n    return {};\n  }\n\n  if (buttonName === \",\") {\n    if (obj.next) {\n      // ignore a . if the next number already has one\n      if (obj.next.includes(\".\")) {\n        return {};\n      }\n      return { next: obj.next + \".\" };\n    }\n    return { next: \"0.\" };\n  }\n  if (buttonName === 'mc') {\n    return {\n      memory: null\n    };\n  }\n  if (buttonName === 'mr') {\n    return {\n      next: obj.memory\n    };\n  }\n  if (buttonName === 'm-') {\n    if (obj.next === null) {\n      obj.next = obj.total\n    }\n    return {\n      memory: \"-\" + obj.next\n    };\n  }\n  if (buttonName === 'm+') {\n    if (obj.next === null) {\n      obj.next = obj.total\n    }\n    return {\n      memory: obj.next\n    };\n  }\n\n  if (buttonName === \"=\") {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null,\n      };\n    } else {\n      // '=' with no operation, nothing to do\n      return {};\n    }\n  }\n\n  if (buttonName === \"-/+\") {\n    if (obj.next) {\n      return { next: (-1 * parseFloat(obj.next)).toString() };\n    }\n    if (obj.total) {\n      return { total: (-1 * parseFloat(obj.total)).toString() };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  // if (!obj.next && !obj.total) {\n  //   return {};\n  // }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation) {\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    };\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return { operation: buttonName };\n  }\n  \n\n\n  \n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  };\n}\n","/Users/cheakimhokmao/cs313-team-one/src/components/SideMenu.js",[],"/Users/cheakimhokmao/cs313-team-one/src/components/basicCal/component/Button.js",[],"/Users/cheakimhokmao/cs313-team-one/src/components/basicCal/logic/operate.js",[],"/Users/cheakimhokmao/cs313-team-one/src/components/basicCal/logic/isNumber.js",[],{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":4,"column":8,"nodeType":"82","messageId":"83","endLine":4,"endColumn":16},{"ruleId":"80","severity":1,"message":"84","line":7,"column":10,"nodeType":"82","messageId":"83","endLine":7,"endColumn":16},{"ruleId":"80","severity":1,"message":"85","line":6,"column":27,"nodeType":"82","messageId":"83","endLine":6,"endColumn":33},{"ruleId":"80","severity":1,"message":"86","line":7,"column":10,"nodeType":"82","messageId":"83","endLine":7,"endColumn":16},{"ruleId":"87","severity":1,"message":"88","line":40,"column":63,"nodeType":"89","messageId":"90","endLine":40,"endColumn":64,"suggestions":"91"},{"ruleId":"87","severity":1,"message":"88","line":40,"column":79,"nodeType":"89","messageId":"90","endLine":40,"endColumn":80,"suggestions":"92"},{"ruleId":"87","severity":1,"message":"88","line":38,"column":63,"nodeType":"89","messageId":"90","endLine":38,"endColumn":64,"suggestions":"93"},{"ruleId":"87","severity":1,"message":"88","line":38,"column":79,"nodeType":"89","messageId":"90","endLine":38,"endColumn":80,"suggestions":"94"},{"ruleId":"80","severity":1,"message":"95","line":1,"column":8,"nodeType":"82","messageId":"83","endLine":1,"endColumn":11},{"ruleId":"96","severity":1,"message":"97","line":56,"column":19,"nodeType":"98","messageId":"99","endLine":56,"endColumn":21},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],"no-unused-vars","'BasicCal' is defined but never used.","Identifier","unusedVar","'render' is defined but never used.","'Router' is defined but never used.","'object' is defined but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["102","103"],["104","105"],["106","107"],["108","109"],"'Big' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"messageId":"110","fix":"111","desc":"112"},{"messageId":"113","fix":"114","desc":"115"},{"messageId":"110","fix":"116","desc":"112"},{"messageId":"113","fix":"117","desc":"115"},{"messageId":"110","fix":"118","desc":"112"},{"messageId":"113","fix":"119","desc":"115"},{"messageId":"110","fix":"120","desc":"112"},{"messageId":"113","fix":"121","desc":"115"},"removeEscape",{"range":"122","text":"123"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"124","text":"125"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"126","text":"123"},{"range":"127","text":"125"},{"range":"128","text":"123"},{"range":"129","text":"125"},{"range":"130","text":"123"},{"range":"131","text":"125"},[1682,1683],"",[1682,1682],"\\",[1698,1699],[1698,1698],[1659,1660],[1659,1659],[1675,1676],[1675,1675]]
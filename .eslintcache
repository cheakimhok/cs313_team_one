[{"/Users/cheakimhokmao/cs313_team_one/src/index.js":"1","/Users/cheakimhokmao/cs313_team_one/src/App.js":"2","/Users/cheakimhokmao/cs313_team_one/src/reportWebVitals.js":"3","/Users/cheakimhokmao/cs313_team_one/src/components/Main.js":"4","/Users/cheakimhokmao/cs313_team_one/src/components/Header.js":"5","/Users/cheakimhokmao/cs313_team_one/src/components/SideMenu.js":"6","/Users/cheakimhokmao/Desktop/cs313_team_one/src/index.js":"7","/Users/cheakimhokmao/Desktop/cs313_team_one/src/reportWebVitals.js":"8","/Users/cheakimhokmao/Desktop/cs313_team_one/src/App.js":"9","/Users/cheakimhokmao/Desktop/cs313_team_one/src/components/Main.js":"10","/Users/cheakimhokmao/Desktop/cs313_team_one/src/components/Header.js":"11","/Users/cheakimhokmao/Desktop/cs313_team_one/src/components/ScientificCalculator.js":"12","/Users/cheakimhokmao/Desktop/cs313_team_one/src/components/SideMenu.js":"13"},{"size":477,"mtime":1612451630916,"results":"14","hashOfConfig":"15"},{"size":290,"mtime":1612449546154,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1612448656532,"results":"17","hashOfConfig":"15"},{"size":419,"mtime":1614339600502,"results":"18","hashOfConfig":"15"},{"size":1800,"mtime":1612967630492,"results":"19","hashOfConfig":"15"},{"size":482,"mtime":1612448656532,"results":"20","hashOfConfig":"15"},{"size":477,"mtime":1614350155617,"results":"21","hashOfConfig":"22"},{"size":362,"mtime":1614348786066,"results":"23","hashOfConfig":"22"},{"size":290,"mtime":1614348786065,"results":"24","hashOfConfig":"22"},{"size":419,"mtime":1614350299557,"results":"25","hashOfConfig":"22"},{"size":1817,"mtime":1614350155616,"results":"26","hashOfConfig":"22"},{"size":43469,"mtime":1614350299558,"results":"27","hashOfConfig":"22"},{"size":482,"mtime":1614350155617,"results":"28","hashOfConfig":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"aqss8l",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"kv97co",{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"45"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/cheakimhokmao/cs313_team_one/src/index.js",[],["59","60"],"/Users/cheakimhokmao/cs313_team_one/src/App.js",[],"/Users/cheakimhokmao/cs313_team_one/src/reportWebVitals.js",[],"/Users/cheakimhokmao/cs313_team_one/src/components/Main.js",[],"/Users/cheakimhokmao/cs313_team_one/src/components/Header.js",[],"/Users/cheakimhokmao/cs313_team_one/src/components/SideMenu.js",[],["61","62"],"/Users/cheakimhokmao/Desktop/cs313_team_one/src/index.js",[],["63","64"],"/Users/cheakimhokmao/Desktop/cs313_team_one/src/reportWebVitals.js",[],"/Users/cheakimhokmao/Desktop/cs313_team_one/src/App.js",[],"/Users/cheakimhokmao/Desktop/cs313_team_one/src/components/Main.js",[],"/Users/cheakimhokmao/Desktop/cs313_team_one/src/components/Header.js",[],"/Users/cheakimhokmao/Desktop/cs313_team_one/src/components/ScientificCalculator.js",["65","66","67","68","69"],"import React, { Component } from 'react';\nimport './ScientificCalculator.css';\nimport PointTarget from 'react-point';\n\nclass AutoScalingText extends Component {\n    state = {\n        scale: 1,\n    };\n\n    componentDidUpdate() {\n        const { scale } = this.state;\n        const node = this.node;\n        const parentNode = node.parentNode;\n        const availableWidth = parentNode.offsetWidth;\n        const actualWidth = node.offsetWidth;\n        const actualScale = availableWidth / actualWidth;\n\n        if (scale === actualScale) return;\n\n        if (actualScale < 1) {\n            this.setState({ scale: actualScale });\n        } else if (scale < 1) {\n            this.setState({ scale: 1 });\n        }\n    }\n\n    render() {\n        const { scale } = this.state;\n\n        return (\n            <div\n                className='auto-scaling-text'\n                style={{ transform: `scale(${scale},${scale})` }}\n                ref={(node) => (this.node = node)}\n            >\n                {this.props.children}\n            </div>\n        );\n    }\n}\n\nclass CalculatorDisplay extends Component {\n    render() {\n        const { value, ...props } = this.props;\n        const language = navigator.language || 'en-US';\n        const escapedKeys = [' e ', 'E', '*', '(', ')', 'r', 'o'];\n        let isNumeric = true;\n\n        escapedKeys.forEach((key) => {\n            if (value.includes(key)) isNumeric = false;\n        });\n\n        const parsedValue = isNumeric ? parseFloat(value) : value;\n\n        let formattedValue = parsedValue.toLocaleString(language, {\n            useGrouping: true,\n            maximumFractionDigits: 10,\n        });\n\n        if (value.endsWith('.')) formattedValue += '.';\n\n        return (\n            <div {...props}>\n                <AutoScalingText>{formattedValue}</AutoScalingText>\n            </div>\n        );\n    }\n}\n\nclass CalculatorKey extends Component {\n    render() {\n        const { onPress, className, ...props } = this.props;\n\n        return (\n            <PointTarget onPoint={onPress}>\n                <button className={`calculator-key ${className}`} {...props} />\n            </PointTarget>\n        );\n    }\n}\n\nconst CalculatorOperations = {\n    '/': (prevValue, nextValue) => prevValue / nextValue,\n    '*': (prevValue, nextValue) => prevValue * nextValue,\n    '+': (prevValue, nextValue) => prevValue + nextValue,\n    '-': (prevValue, nextValue) => prevValue - nextValue,\n    '=': (prevValue, nextValue) => nextValue,\n    nthRoot: (prevValue, nextValue) => Math.pow(nextValue, 1 / prevValue),\n    xPowY: (prevValue, nextValue) => Math.pow(prevValue, nextValue),\n    yPowX: (prevValue, nextValue) => Math.pow(nextValue, prevValue),\n    logY: (prevValue, nextValue) => Math.log(nextValue) / Math.log(prevValue),\n};\n\nclass ScientificCalculator extends Component {\n    state = {\n        value: null,\n        displayValue: '0',\n        operator: null,\n        waitingForOperand: false,\n        done: false,\n        shift: false,\n        degree: false,\n        ee: false,\n        isMemoryActive: false,\n        isBracketsActive: false,\n        isLeftBracket: false,\n        isRightBracket: false,\n        isDigit: false,\n        isOperator: false,\n        countBracket: 0,\n        checkLeftBracket: false,\n        memory: {\n            memory_plus: 0,\n            memory_minus: 0,\n            memory_recall: null,\n        },\n    };\n\n    degreeClick = () => {\n        this.setState((state) => {\n            return {\n                degree: !state.degree,\n            };\n        });\n    };\n\n    shiftClick = () => {\n        this.setState((state) => {\n            return {\n                shift: !state.shift,\n            };\n        });\n    };\n\n    clearAll() {\n        this.setState({\n            value: null,\n            displayValue: '0',\n            operator: null,\n            waitingForOperand: false,\n            done: false,\n            ee: false,\n            isMemoryActive: false,\n            isBracketsActive: false,\n            isRightBracket: false,\n            isLeftBracket: false,\n            isDigit: false,\n            isOperator: false,\n            countBracket: 0,\n            checkLeftBracket: false,\n        });\n    }\n\n    clearDisplay() {\n        this.setState({\n            displayValue: '0',\n        });\n    }\n\n    clearLastChar() {\n        const { displayValue } = this.state;\n\n        this.setState({\n            displayValue: displayValue.substring(0, displayValue.length - 1) || '0',\n        });\n    }\n\n    toggleSign() {\n        const { displayValue } = this.state;\n        const newValue = parseFloat(displayValue) * -1;\n\n        this.setState({\n            displayValue: String(newValue),\n        });\n    }\n\n    inputPercent() {\n        const { displayValue } = this.state;\n        const currentValue = parseFloat(displayValue);\n\n        if (currentValue === 0) return;\n\n        const fixedDigits = displayValue.replace(/^-?\\d*\\.?/, '');\n        const newValue = parseFloat(displayValue) / 100;\n\n        this.setState({\n            displayValue: String(newValue.toFixed(fixedDigits.length + 2)),\n            done: true,\n        });\n    }\n\n    inputDot() {\n        const { displayValue, waitingForOperand, isRightBracket } = this.state;\n\n        if (waitingForOperand === true) {\n            this.setState({ displayValue: '0.', waitingForOperand: false });\n        } else if (!/\\./.test(displayValue)) {\n            this.setState({\n                displayValue: displayValue + '.',\n                waitingForOperand: false,\n            });\n        }\n    }\n\n    inputDigit(digit) {\n        const { displayValue, waitingForOperand, done, isRightBracket } = this.state;\n\n        if (waitingForOperand) {\n            this.setState({\n                displayValue: String(digit),\n                waitingForOperand: false,\n                isDigit: true,\n            });\n        } else {\n            const hasDot = displayValue.includes('.');\n            const integer = displayValue.split('.')[0];\n\n            if (!hasDot && integer.length >= 10) return;\n\n            if (done === true) {\n                this.clearAll();\n                this.setState({ displayValue: String(digit), isDigit: true, isOperator: false });\n            } else {\n                this.setState({\n                    displayValue: displayValue === '0' ? String(digit) : displayValue + digit,\n                    isDigit: true,\n                    isOperator: true,\n                    checkLeftBracket: false,\n                });\n            }\n        }\n    }\n\n    performOperation(nextOperator) {\n        const {\n            value,\n            displayValue,\n            operator,\n            waitingForOperand,\n            isMemoryActive,\n            isbracketsActive,\n            isRightBracket,\n            isLeftBracket,\n            isDigit,\n            isOperator,\n            ee,\n            countBracket,\n        } = this.state;\n\n        if (nextOperator === '=' && countBracket !== 0) {\n            return this.setState({\n                displayValue: 'Error',\n                isbracketsActive: false,\n                done: true,\n            });\n        }\n\n        if (isOperator === false) {\n            return this.setState({ displayValue });\n        }\n\n        if (isbracketsActive === true && nextOperator === '=') {\n            return this.setState({\n                displayValue: String(eval(displayValue)),\n                isbracketsActive: false,\n                done: true,\n            });\n        } else if (isbracketsActive === true) {\n            if (isDigit) {\n                this.setState({\n                    displayValue: displayValue + nextOperator,\n                    isOperator: false,\n                    isDigit: false,\n                    checkLeftBracket: false,\n                });\n            }\n        } else {\n            const inputValue = parseFloat(displayValue);\n\n            if (ee === true) {\n                const currentValue = displayValue.replace(/\\s/g, '');\n                return this.setState({\n                    displayValue: parseFloat(currentValue).toPrecision(),\n                    done: true,\n                    ee: false,\n                });\n            }\n\n            if (value == null) {\n                this.setState({\n                    value: inputValue,\n                });\n            } else if (\n                (operator && waitingForOperand === false) ||\n                (operator && isMemoryActive === true)\n            ) {\n                const currentValue = parseFloat(value) || 0;\n                const newValue = CalculatorOperations[operator](currentValue, inputValue);\n\n                this.setState({\n                    value: newValue,\n                    displayValue: String(newValue),\n                    isMemoryActive: false,\n                });\n            }\n\n            this.setState({\n                waitingForOperand: true,\n                operator: nextOperator,\n            });\n        }\n    }\n\n    keyDown = (event) => {\n        let { key } = event;\n\n        if (key === 'Enter') key = '=';\n\n        if (/\\d/.test(key)) {\n            event.preventDefault();\n            this.inputDigit(parseInt(key, 10));\n        } else if (key in CalculatorOperations) {\n            event.preventDefault();\n            this.performOperation(key);\n        } else if (key === '.') {\n            event.preventDefault();\n            this.inputDot();\n        } else if (key === '%') {\n            event.preventDefault();\n            this.inputPercent();\n        } else if (key === 'Backspace') {\n            event.preventDefault();\n            this.clearLastChar();\n        } else if (key === 'Clear') {\n            event.preventDefault();\n\n            if (this.state.displayValue !== '0') {\n                this.clearDisplay();\n            } else {\n                this.clearAll();\n            }\n        }\n    };\n\n    memoryClear() {\n        this.setState((prevState) => ({\n            memory: {\n                ...prevState.memory,\n                memory_plus: 0,\n                memory_minus: 0,\n                memory_recall: null,\n            },\n            isMemoryActive: false,\n        }));\n    }\n\n    memoryPlus() {\n        let temp = parseFloat(this.state.displayValue) + this.state.memory.memory_plus;\n        this.setState((prevState) => ({\n            memory: {\n                ...prevState.memory,\n                memory_plus: temp,\n            },\n        }));\n    }\n\n    memoryMinus() {\n        let temp = parseInt(this.state.displayValue) + this.state.memory.memory_minus;\n        this.setState((prevState) => ({\n            memory: {\n                ...prevState.memory,\n                memory_minus: temp,\n            },\n        }));\n    }\n\n    memoryRecall() {\n        const { displayValue } = this.state;\n        let temp = (this.state.memory.memory_plus - this.state.memory.memory_minus).toString();\n\n        if (displayValue !== '0') {\n            this.setState({\n                displayValue: temp,\n                isMemoryActive: true,\n            });\n        } else {\n            this.setState({\n                displayValue: temp,\n                isMemoryActive: false,\n                done: true,\n            });\n        }\n    }\n\n    power2() {\n        const { displayValue } = this.state;\n        this.setState({ displayValue: String(Math.pow(parseFloat(displayValue), 2)), done: true });\n    }\n\n    power3() {\n        const { displayValue } = this.state;\n        this.setState({ displayValue: String(Math.pow(parseFloat(displayValue), 3)), done: true });\n    }\n\n    tenPowerX() {\n        const { displayValue } = this.state;\n        this.setState({ displayValue: String(Math.pow(10, parseFloat(displayValue))), done: true });\n    }\n\n    twoPowerX() {\n        const { displayValue } = this.state;\n        this.setState({ displayValue: String(Math.pow(2, parseFloat(displayValue))), done: true });\n    }\n\n    // pi() {\n    //     this.setState({ displayValue: String(Math.PI) });\n    // }\n\n    // exponent() {\n    //     this.setState({ displayValue: String(Math.exp(1)) });\n    // }\n\n    rand() {\n        this.setState({ displayValue: String(Math.random()) });\n    }\n\n    sin() {\n        const { displayValue, degree } = this.state;\n\n        if (degree === false) {\n            this.setState({ displayValue: String(Math.sin(displayValue)), done: true });\n        } else {\n            const result = String(Math.sin((parseFloat(displayValue) * Math.PI) / 180));\n            this.setState({ displayValue: result, done: true });\n        }\n    }\n\n    cos() {\n        const { displayValue, degree } = this.state;\n\n        if (degree === false) {\n            this.setState({ displayValue: String(Math.cos(displayValue)), done: true });\n        } else {\n            const result = String(Math.cos((parseInt(displayValue) * Math.PI) / 180));\n            this.setState({ displayValue: result, done: true });\n        }\n    }\n\n    tan() {\n        const { displayValue, degree } = this.state;\n\n        if (degree === false) {\n            this.setState({ displayValue: String(Math.tan(displayValue)), done: true });\n        } else {\n            if (displayValue === '90' || displayValue === '270') {\n                this.setState({ displayValue: 'Not a number' });\n            } else {\n                const result = String(Math.tan((parseFloat(displayValue) * Math.PI) / 180));\n                this.setState({ displayValue: result, done: true });\n            }\n        }\n    }\n\n    sinh() {\n        const { displayValue } = this.state;\n        const result = String(Math.sinh(parseFloat(displayValue)));\n        this.setState({ displayValue: result, done: true });\n    }\n\n    cosh() {\n        const { displayValue } = this.state;\n        const result = String(Math.cosh(parseFloat(displayValue)));\n        this.setState({ displayValue: result, done: true });\n    }\n\n    tanh() {\n        const { displayValue } = this.state;\n        const result = String(Math.tanh(parseFloat(displayValue)));\n        this.setState({ displayValue: result, done: true });\n    }\n\n    sinInverse() {\n        const { displayValue, degree } = this.state;\n\n        if (degree === false) {\n            this.setState({ displayValue: String(Math.asin(displayValue)), done: true });\n        } else {\n            const result = String((Math.asin(parseFloat(displayValue)) * 180) / Math.PI);\n            this.setState({ displayValue: result, done: true });\n        }\n    }\n\n    cosInverse() {\n        const { displayValue, degree } = this.state;\n\n        if (degree === false) {\n            this.setState({ displayValue: String(Math.acos(displayValue)), done: true });\n        } else {\n            const result = String((Math.acos(parseFloat(displayValue)) * 180) / Math.PI);\n            this.setState({ displayValue: result, done: true });\n        }\n    }\n\n    tanInverse() {\n        const { displayValue, degree } = this.state;\n\n        if (degree === false) {\n            this.setState({ displayValue: String(Math.atan(displayValue)), done: true });\n        } else {\n            const result = String((Math.atan(parseFloat(displayValue)) * 180) / Math.PI);\n            this.setState({ displayValue: result, done: true });\n        }\n    }\n\n    sinhInverse() {\n        const { displayValue } = this.state;\n        const result = String(Math.asinh(parseFloat(displayValue)));\n        this.setState({ displayValue: result, done: true });\n    }\n\n    coshInverse() {\n        const { displayValue } = this.state;\n        const result = String(Math.acosh(parseFloat(displayValue)));\n        this.setState({ displayValue: result, done: true });\n    }\n\n    tanhInverse() {\n        const { displayValue } = this.state;\n        const result = String(Math.atanh(parseFloat(displayValue)));\n        this.setState({ displayValue: result, done: true });\n    }\n\n    squareRoot() {\n        const { displayValue } = this.state;\n        this.setState({ displayValue: String(Math.sqrt(parseFloat(displayValue))), done: true });\n    }\n\n    cubeRoot() {\n        const { displayValue } = this.state;\n        this.setState({ displayValue: String(Math.cbrt(parseFloat(displayValue))), done: true });\n    }\n\n    factorial() {\n        const { displayValue } = this.state;\n\n        if (displayValue.indexOf('.') !== -1) {\n            return this.setState({ displayValue: 'NaN' });\n        }\n\n        if (displayValue === '1' || displayValue === '-1') {\n            return this.setState({ displayValue });\n        } else if (parseInt(displayValue) > 1) {\n            var result = 1;\n\n            for (var i = 1; i <= parseInt(displayValue); ++i) {\n                result *= i;\n            }\n\n            return this.setState({ displayValue: String(result), done: true });\n        } else if (parseInt(displayValue) < -1) {\n            var resultNegative = 1;\n\n            for (var j = -1; j >= parseInt(displayValue); j--) {\n                resultNegative *= j;\n            }\n\n            return this.setState({ displayValue: String(resultNegative), done: true });\n        }\n    }\n\n    log10() {\n        const { displayValue } = this.state;\n\n        if (parseInt(displayValue) <= 0) {\n            return this.setState({ displayValue: 'Not a Number' });\n        }\n\n        this.setState({ displayValue: String(Math.log10(parseFloat(displayValue))), done: true });\n    }\n\n    log2() {\n        const { displayValue } = this.state;\n\n        if (parseInt(displayValue) <= 0) {\n            return this.setState({ displayValue: 'Not a Number' });\n        }\n\n        this.setState({ displayValue: String(Math.log2(parseFloat(displayValue))), done: true });\n    }\n\n    log() {\n        const { displayValue } = this.state;\n\n        if (parseInt(displayValue) <= 0) {\n            return this.setState({ displayValue: 'Not a Number' });\n        }\n\n        this.setState({ displayValue: String(Math.log(parseFloat(displayValue))), done: true });\n    }\n\n    multiplicativeInverse() {\n        const { displayValue } = this.state;\n\n        if (displayValue === '0') {\n            this.setState({ displayValue: 'Not a number' });\n        }\n\n        const result = String(1 / displayValue);\n        this.setState({ displayValue: result, done: true });\n    }\n\n    exponential() {\n        const { displayValue } = this.state;\n\n        if (displayValue === '0') {\n            return this.setState({ displayValue: '1' });\n        }\n\n        const result = String(Math.exp(parseFloat(displayValue)));\n        this.setState({ displayValue: result, done: true });\n    }\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.keyDown);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.keyDown);\n    }\n\n    ee() {\n        const { displayValue, done, ee } = this.state;\n\n        if (done === false) {\n            if (ee === true) {\n                this.setState({ displayValue });\n            } else {\n                this.setState({ displayValue: displayValue + ' e ', ee: true });\n            }\n        }\n    }\n\n    leftBracket() {\n        const { displayValue, isDigit, isOperator } = this.state;\n\n        this.setState({\n            displayValue:\n                displayValue === '0' || displayValue === 'Error'\n                    ? '('\n                    : isDigit === true && isOperator === false\n                    ? displayValue + '*('\n                    : displayValue + '(',\n            isbracketsActive: true,\n            isRightBracket: false,\n            isLeftBracket: true,\n            isDigit: false,\n        });\n    }\n\n    rightBracket() {\n        const { displayValue, isLeftBracket, isDigit } = this.state;\n\n        if (isLeftBracket && isDigit) {\n            this.setState({\n                displayValue: displayValue === '0' ? ')' : displayValue + ')',\n                isbracketsActive: true,\n                isRightBracket: true,\n            });\n        }\n    }\n\n    render() {\n        const { displayValue } = this.state;\n        const clearDisplay = displayValue !== '0';\n        const clearText = clearDisplay ? 'C' : 'AC';\n\n        return (\n            <div id='scientific-calculator'>\n                <div className='calculator-body'>\n                    <div class='resultContainer'>\n                        <div class='result'>\n                            <p>\n                                <CalculatorDisplay value={displayValue} />\n                            </p>\n                        </div>\n                    </div>\n                    <div className='button'>\n                        <div className='test'>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.leftBracket()}\n                            >\n                                (\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.rightBracket()}\n                            >\n                                )\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.memoryClear()}\n                            >\n                                mc\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.memoryPlus()}\n                            >\n                                m+\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.memoryMinus()}\n                            >\n                                m-\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.memoryRecall()}\n                            >\n                                mr\n                            </CalculatorKey>\n                            <CalculatorKey\n                                className='clear'\n                                style={{ backgroundColor: '#BB4444', color: '#F0F5F9' }}\n                                onPress={() =>\n                                    clearDisplay ? this.clearDisplay() : this.clearAll()\n                                }\n                            >\n                                {clearText}\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.toggleSign()}\n                            >\n                                -/+\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputPercent()}\n                            >\n                                %\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.performOperation('/')}\n                            >\n                                ÷\n                            </CalculatorKey>\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={this.shiftClick}\n                                >\n                                    2\n                                    <sup>\n                                        <small>nd</small>\n                                    </sup>\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={this.shiftClick}\n                                >\n                                    1\n                                    <sup>\n                                        <small>st</small>\n                                    </sup>\n                                </CalculatorKey>\n                            )}\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.power2()}\n                            >\n                                x\n                                <sup>\n                                    <small>2</small>\n                                </sup>\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.power3()}\n                            >\n                                x\n                                <sup>\n                                    <small>3</small>\n                                </sup>\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.power2()}\n                            >\n                                x\n                                <sup>\n                                    <small>y</small>\n                                </sup>\n                            </CalculatorKey>\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.exponential()}\n                                >\n                                    e\n                                    <sup>\n                                        <small>x</small>\n                                    </sup>\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.performOperation('yPowX')}\n                                >\n                                    y\n                                    <sup>\n                                        <small>x</small>\n                                    </sup>\n                                </CalculatorKey>\n                            )}\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.tenPowerX()}\n                                >\n                                    10\n                                    <sup>\n                                        <small>x</small>\n                                    </sup>\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.twoPowerX()}\n                                >\n                                    2\n                                    <sup>\n                                        <small>x</small>\n                                    </sup>\n                                </CalculatorKey>\n                            )}\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(7)}\n                            >\n                                7\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(8)}\n                            >\n                                8\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(9)}\n                            >\n                                9\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.performOperation('*')}\n                            >\n                                ×\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.multiplicativeInverse()}\n                            >\n                                1/x\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.squareRoot()}\n                            >\n                                <sup>\n                                    <small>2</small>\n                                </sup>\n                                √\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.cubeRoot()}\n                            >\n                                <sup>\n                                    <small>3</small>\n                                </sup>\n                                √\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.performOperation('nthRoot')}\n                            >\n                                <sup>\n                                    <small>x</small>\n                                </sup>\n                                √\n                            </CalculatorKey>\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.log()}\n                                >\n                                    ln\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.performOperation('logY')}\n                                >\n                                    log\n                                    <sub>\n                                        <small>y</small>\n                                    </sub>\n                                </CalculatorKey>\n                            )}\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.log10()}\n                                >\n                                    log\n                                    <sub>\n                                        <small>10</small>\n                                    </sub>\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.log2()}\n                                >\n                                    log\n                                    <sub>\n                                        <small>2</small>\n                                    </sub>\n                                </CalculatorKey>\n                            )}\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(4)}\n                            >\n                                4\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(5)}\n                            >\n                                5\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(6)}\n                            >\n                                6\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.performOperation('-')}\n                            >\n                                −\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.factorial()}\n                            >\n                                x!\n                            </CalculatorKey>\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.sin()}\n                                >\n                                    sin\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.sinInverse()}\n                                >\n                                    sin\n                                    <sup>\n                                        <small>-1</small>\n                                    </sup>\n                                </CalculatorKey>\n                            )}\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.cos()}\n                                >\n                                    cos\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.cosInverse()}\n                                >\n                                    cos\n                                    <sup>\n                                        <small>-1</small>\n                                    </sup>\n                                </CalculatorKey>\n                            )}\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.tan()}\n                                >\n                                    tan\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.tanhInverse()}\n                                >\n                                    tan\n                                    <sup>\n                                        <small>-1</small>\n                                    </sup>\n                                </CalculatorKey>\n                            )}\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.exponent()}\n                            >\n                                e\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(4)}\n                            >\n                                EE\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(1)}\n                            >\n                                1\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(2)}\n                            >\n                                2\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(3)}\n                            >\n                                3\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.performOperation('+')}\n                            >\n                                +\n                            </CalculatorKey>\n                            {!this.state.degree ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={this.degreeClick}\n                                >\n                                    Rad\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={this.degreeClick}\n                                >\n                                    Deg\n                                </CalculatorKey>\n                            )}\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.sinh()}\n                                >\n                                    sinh\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.sinhInverse()}\n                                >\n                                    sinh\n                                    <sup>\n                                        <small>-1</small>\n                                    </sup>\n                                </CalculatorKey>\n                            )}\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.cosh()}\n                                >\n                                    cosh\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.coshInverse()}\n                                >\n                                    cosh\n                                    <sup>\n                                        <small>-1</small>\n                                    </sup>\n                                </CalculatorKey>\n                            )}\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.tanh()}\n                                >\n                                    tanh\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.tanhInverse()}\n                                >\n                                    tanh\n                                    <sup>\n                                        <small>-1</small>\n                                    </sup>\n                                </CalculatorKey>\n                            )}\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(Math.PI)}\n                            >\n                                π\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.rand()}\n                            >\n                                Rand\n                            </CalculatorKey>\n                            <CalculatorKey\n                                className='zero'\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(0)}\n                            >\n                                0\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDot()}\n                            >\n                                .\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#F0F5F9', color: '#52616b' }}\n                                onPress={() => this.performOperation('=')}\n                            >\n                                =\n                            </CalculatorKey>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ScientificCalculator;\n","/Users/cheakimhokmao/Desktop/cs313_team_one/src/components/SideMenu.js",[],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"70","replacedBy":"74"},{"ruleId":"72","replacedBy":"75"},{"ruleId":"70","replacedBy":"76"},{"ruleId":"72","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":193,"column":50,"nodeType":"80","messageId":"81","endLine":193,"endColumn":64},{"ruleId":"78","severity":1,"message":"79","line":206,"column":56,"nodeType":"80","messageId":"81","endLine":206,"endColumn":70},{"ruleId":"78","severity":1,"message":"79","line":242,"column":13,"nodeType":"80","messageId":"81","endLine":242,"endColumn":27},{"ruleId":"78","severity":1,"message":"82","line":243,"column":13,"nodeType":"80","messageId":"81","endLine":243,"endColumn":26},{"ruleId":"83","severity":1,"message":"84","line":264,"column":38,"nodeType":"85","messageId":"86","endLine":264,"endColumn":42},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],["87"],["88"],["87"],["88"],"no-unused-vars","'isRightBracket' is assigned a value but never used.","Identifier","unusedVar","'isLeftBracket' is assigned a value but never used.","no-eval","eval can be harmful.","CallExpression","unexpected","no-global-assign","no-unsafe-negation"]